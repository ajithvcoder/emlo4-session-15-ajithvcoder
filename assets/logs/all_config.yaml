apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-01-17T17:28:38Z"
    generateName: aws-load-balancer-controller-7fc55d9569-
    labels:
      app.kubernetes.io/instance: aws-load-balancer-controller
      app.kubernetes.io/name: aws-load-balancer-controller
      pod-template-hash: 7fc55d9569
    name: aws-load-balancer-controller-7fc55d9569-q2bnl
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: aws-load-balancer-controller-7fc55d9569
      uid: ec0cc64e-dfcf-4302-a63e-4a8cde32484f
    resourceVersion: "19226"
    uid: cdab7a6e-e28c-4059-888f-62a35899c11f
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - aws-load-balancer-controller
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - --cluster-name=basic-cluster-ap
      - --ingress-class=alb
      env:
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: ap-south-1
      - name: AWS_REGION
        value: ap-south-1
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::306093656765:role/eksctl-basic-cluster-ap-addon-iamserviceaccou-Role1-SXURp7EUcyPv
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: public.ecr.aws/eks/aws-load-balancer-controller:v2.11.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 2
        httpGet:
          path: /healthz
          port: 61779
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-load-balancer-controller
      ports:
      - containerPort: 9443
        name: webhook-server
        protocol: TCP
      - containerPort: 8080
        name: metrics-server
        protocol: TCP
      readinessProbe:
        failureThreshold: 2
        httpGet:
          path: /readyz
          port: 61779
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/k8s-webhook-server/serving-certs
        name: cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-n2xnb
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-19-29.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
    serviceAccount: aws-load-balancer-controller
    serviceAccountName: aws-load-balancer-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - name: cert
      secret:
        defaultMode: 420
        secretName: aws-load-balancer-tls
    - name: kube-api-access-n2xnb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:40Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://c2930442a30e770c3cc4e2946f918f500386512277328214315c4c00f2e3dec7
      image: public.ecr.aws/eks/aws-load-balancer-controller:v2.11.0
      imageID: public.ecr.aws/eks/aws-load-balancer-controller@sha256:462d6afb0ea2646db74951755bc5292ce3f9738c8e97dd401a96afa93f7538b3
      lastState: {}
      name: aws-load-balancer-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T17:28:39Z"
    hostIP: 192.168.19.29
    hostIPs:
    - ip: 192.168.19.29
    phase: Running
    podIP: 192.168.29.104
    podIPs:
    - ip: 192.168.29.104
    qosClass: BestEffort
    startTime: "2025-01-17T17:28:38Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8080"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-01-17T17:28:38Z"
    generateName: aws-load-balancer-controller-7fc55d9569-
    labels:
      app.kubernetes.io/instance: aws-load-balancer-controller
      app.kubernetes.io/name: aws-load-balancer-controller
      pod-template-hash: 7fc55d9569
    name: aws-load-balancer-controller-7fc55d9569-vsjrd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: aws-load-balancer-controller-7fc55d9569
      uid: ec0cc64e-dfcf-4302-a63e-4a8cde32484f
    resourceVersion: "19221"
    uid: e2e07273-5cf8-4950-93ad-85b3f1c1eaf8
  spec:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - aws-load-balancer-controller
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - --cluster-name=basic-cluster-ap
      - --ingress-class=alb
      env:
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_DEFAULT_REGION
        value: ap-south-1
      - name: AWS_REGION
        value: ap-south-1
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::306093656765:role/eksctl-basic-cluster-ap-addon-iamserviceaccou-Role1-SXURp7EUcyPv
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: public.ecr.aws/eks/aws-load-balancer-controller:v2.11.0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 2
        httpGet:
          path: /healthz
          port: 61779
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-load-balancer-controller
      ports:
      - containerPort: 9443
        name: webhook-server
        protocol: TCP
      - containerPort: 8080
        name: metrics-server
        protocol: TCP
      readinessProbe:
        failureThreshold: 2
        httpGet:
          path: /readyz
          port: 61779
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp/k8s-webhook-server/serving-certs
        name: cert
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-97f2d
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
    serviceAccount: aws-load-balancer-controller
    serviceAccountName: aws-load-balancer-controller
    terminationGracePeriodSeconds: 10
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - name: cert
      secret:
        defaultMode: 420
        secretName: aws-load-balancer-tls
    - name: kube-api-access-97f2d
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:40Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:28:38Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://ba02428679b546b5cae5fb3b36969ac00b3d32c98752e84317b7175a937d9d58
      image: public.ecr.aws/eks/aws-load-balancer-controller:v2.11.0
      imageID: public.ecr.aws/eks/aws-load-balancer-controller@sha256:462d6afb0ea2646db74951755bc5292ce3f9738c8e97dd401a96afa93f7538b3
      lastState: {}
      name: aws-load-balancer-controller
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T17:28:39Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.75.244
    podIPs:
    - ip: 192.168.75.244
    qosClass: BestEffort
    startTime: "2025-01-17T17:28:38Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:32:29Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 57d7b87ccb
      k8s-app: aws-node
      pod-template-generation: "1"
    name: aws-node-9hj6n
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 7dc73c45-15a7-4368-bb69-29dd29dba1a2
    resourceVersion: "36561"
    uid: ac14f917-1466-4b49-92f0-0e38734fab06
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-32-97.ap-south-1.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://9B462804DC7B7311092EE08BB01C4870.gr7.ap-south-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: basic-cluster-ap
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.19.0
      - name: VPC_ID
        value: vpc-078a1aa9f420a2ac9
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbfgb
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imagePullPolicy: Always
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbfgb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imagePullPolicy: Always
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nbfgb
        readOnly: true
    nodeName: ip-192-168-32-97.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-nbfgb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:38Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:40Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:29Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://8db27d23c7e0d8ca1f726c414390224e4218a29fc58f4817a9c8efc6d815052d
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:f3280f090b6c5d3128357d8710db237931f5e1089e8017ab3d9cece429d77954
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:48Z"
    - containerID: containerd://c4799b3719aea577cf53c86f14fc141a21c68bdaf11a0a2c3481a42750dc98ba
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni@sha256:efada7e5222a3376dc170b43b569f4dea762fd58186467c233b512bd6ab5415b
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:44Z"
    hostIP: 192.168.32.97
    hostIPs:
    - ip: 192.168.32.97
    initContainerStatuses:
    - containerID: containerd://435022b43bd4cbf74932848926143adcea0928b1bae26c9a191ae72304af1d94
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init@sha256:ce36e6fc8457a3c79eab29ad7ca86ebc9220056c443e15502eeab7ceeef8496f
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://435022b43bd4cbf74932848926143adcea0928b1bae26c9a191ae72304af1d94
          exitCode: 0
          finishedAt: "2025-01-17T18:32:39Z"
          reason: Completed
          startedAt: "2025-01-17T18:32:38Z"
    phase: Running
    podIP: 192.168.32.97
    podIPs:
    - ip: 192.168.32.97
    qosClass: Burstable
    startTime: "2025-01-17T18:32:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T17:18:06Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 57d7b87ccb
      k8s-app: aws-node
      pod-template-generation: "1"
    name: aws-node-fsg6m
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 7dc73c45-15a7-4368-bb69-29dd29dba1a2
    resourceVersion: "16294"
    uid: 6005c092-cc99-4e63-b2d7-f1fba0f385ef
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-19-29.ap-south-1.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://9B462804DC7B7311092EE08BB01C4870.gr7.ap-south-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: basic-cluster-ap
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.19.0
      - name: VPC_ID
        value: vpc-078a1aa9f420a2ac9
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-npdkn
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imagePullPolicy: Always
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-npdkn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imagePullPolicy: Always
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-npdkn
        readOnly: true
    nodeName: ip-192-168-19-29.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-npdkn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:15Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:26Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:26Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:06Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7457f77c3edf28f82b211185c9502d55164c86e0720922c1d9ed3cb9a8a53e97
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:f3280f090b6c5d3128357d8710db237931f5e1089e8017ab3d9cece429d77954
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T17:18:25Z"
    - containerID: containerd://8f3c74fc791175838e6768d53f95ef0792b0716f5e1a9a2c53f45bdd6c62aef0
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni@sha256:efada7e5222a3376dc170b43b569f4dea762fd58186467c233b512bd6ab5415b
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T17:18:21Z"
    hostIP: 192.168.19.29
    hostIPs:
    - ip: 192.168.19.29
    initContainerStatuses:
    - containerID: containerd://0ba46fe9d0f8d7444c28d3e8664cefa4f020c44f4306e1a198e0f655edd40ddb
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init@sha256:ce36e6fc8457a3c79eab29ad7ca86ebc9220056c443e15502eeab7ceeef8496f
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://0ba46fe9d0f8d7444c28d3e8664cefa4f020c44f4306e1a198e0f655edd40ddb
          exitCode: 0
          finishedAt: "2025-01-17T17:18:16Z"
          reason: Completed
          startedAt: "2025-01-17T17:18:15Z"
    phase: Running
    podIP: 192.168.19.29
    podIPs:
    - ip: 192.168.19.29
    qosClass: Burstable
    startTime: "2025-01-17T17:18:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:26:26Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 57d7b87ccb
      k8s-app: aws-node
      pod-template-generation: "1"
    name: aws-node-ktqjd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 7dc73c45-15a7-4368-bb69-29dd29dba1a2
    resourceVersion: "34803"
    uid: dcb284d4-d5b8-4f48-bf1f-2773e03e6f6f
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-70-3.ap-south-1.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://9B462804DC7B7311092EE08BB01C4870.gr7.ap-south-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: basic-cluster-ap
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.19.0
      - name: VPC_ID
        value: vpc-078a1aa9f420a2ac9
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cccd9
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imagePullPolicy: Always
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cccd9
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imagePullPolicy: Always
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-cccd9
        readOnly: true
    nodeName: ip-192-168-70-3.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-cccd9
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:36Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:46Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:46Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://affb951e6e6cc7ea69e1b9809024d9fe595fcb6ccc0391cb9eba49feace1e535
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:f3280f090b6c5d3128357d8710db237931f5e1089e8017ab3d9cece429d77954
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:26:46Z"
    - containerID: containerd://36bb75b8001a867fbe32e312e2289ea6db97bd5e376785c70e4fda7c26711f26
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni@sha256:efada7e5222a3376dc170b43b569f4dea762fd58186467c233b512bd6ab5415b
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:26:42Z"
    hostIP: 192.168.70.3
    hostIPs:
    - ip: 192.168.70.3
    initContainerStatuses:
    - containerID: containerd://d5713e4878d3ca8180a6a636c3c4bd7618f4ca7d517827d176e1256ff1183a42
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init@sha256:ce36e6fc8457a3c79eab29ad7ca86ebc9220056c443e15502eeab7ceeef8496f
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://d5713e4878d3ca8180a6a636c3c4bd7618f4ca7d517827d176e1256ff1183a42
          exitCode: 0
          finishedAt: "2025-01-17T18:26:36Z"
          reason: Completed
          startedAt: "2025-01-17T18:26:36Z"
    phase: Running
    podIP: 192.168.70.3
    podIPs:
    - ip: 192.168.70.3
    qosClass: Burstable
    startTime: "2025-01-17T18:26:26Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:32:08Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 57d7b87ccb
      k8s-app: aws-node
      pod-template-generation: "1"
    name: aws-node-qknk2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 7dc73c45-15a7-4368-bb69-29dd29dba1a2
    resourceVersion: "36353"
    uid: 19170d22-6c4f-4808-9ba8-53c3a203807a
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-36-63.ap-south-1.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://9B462804DC7B7311092EE08BB01C4870.gr7.ap-south-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: basic-cluster-ap
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.19.0
      - name: VPC_ID
        value: vpc-078a1aa9f420a2ac9
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d5f4d
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imagePullPolicy: Always
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d5f4d
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imagePullPolicy: Always
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-d5f4d
        readOnly: true
    nodeName: ip-192-168-36-63.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-d5f4d
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:17Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:19Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:27Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:27Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6b3b40183490ceebe3a4c615073a85ff2bcb48977f3e77a8107e9b239f099322
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:f3280f090b6c5d3128357d8710db237931f5e1089e8017ab3d9cece429d77954
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:26Z"
    - containerID: containerd://b6931eebaeeedf55762f945e8663840bda06dff05c0c549f63375456648e9031
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni@sha256:efada7e5222a3376dc170b43b569f4dea762fd58186467c233b512bd6ab5415b
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:23Z"
    hostIP: 192.168.36.63
    hostIPs:
    - ip: 192.168.36.63
    initContainerStatuses:
    - containerID: containerd://07f0d85ae02baa80054c23e8ba8eb3e3e87e2799a655bba58880a1f5326aef8d
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init@sha256:ce36e6fc8457a3c79eab29ad7ca86ebc9220056c443e15502eeab7ceeef8496f
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://07f0d85ae02baa80054c23e8ba8eb3e3e87e2799a655bba58880a1f5326aef8d
          exitCode: 0
          finishedAt: "2025-01-17T18:32:17Z"
          reason: Completed
          startedAt: "2025-01-17T18:32:17Z"
    phase: Running
    podIP: 192.168.36.63
    podIPs:
    - ip: 192.168.36.63
    qosClass: Burstable
    startTime: "2025-01-17T18:32:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T16:09:02Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 57d7b87ccb
      k8s-app: aws-node
      pod-template-generation: "1"
    name: aws-node-qtmfk
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 7dc73c45-15a7-4368-bb69-29dd29dba1a2
    resourceVersion: "1435"
    uid: a714e381-78ec-4fa9-a100-10145aac94eb
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-74-83.ap-south-1.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://9B462804DC7B7311092EE08BB01C4870.gr7.ap-south-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: basic-cluster-ap
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.19.0
      - name: VPC_ID
        value: vpc-078a1aa9f420a2ac9
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w8lx2
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imagePullPolicy: Always
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w8lx2
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imagePullPolicy: Always
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-w8lx2
        readOnly: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-w8lx2
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:06Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:11Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:14Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:14Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://10380efada7d9f9027923a1bb99817d7d40e924205f5602f88fe6063fd276203
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:f3280f090b6c5d3128357d8710db237931f5e1089e8017ab3d9cece429d77954
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:09:13Z"
    - containerID: containerd://557486a1794a466025a7d57158ff9969465fc7958ea8cd055d8f953752b63039
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni:v1.19.0
      imageID: sha256:59728c6d6f3a030672ca78d141d1cfbfea4bb3259075f6614c40bbf375948595
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:09:12Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    initContainerStatuses:
    - containerID: containerd://f851ad80a68d3d242a5519389e821aafd0ea35e3f6e4a7857afdd58f88a42027
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init@sha256:ce36e6fc8457a3c79eab29ad7ca86ebc9220056c443e15502eeab7ceeef8496f
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://f851ad80a68d3d242a5519389e821aafd0ea35e3f6e4a7857afdd58f88a42027
          exitCode: 0
          finishedAt: "2025-01-17T16:09:05Z"
          reason: Completed
          startedAt: "2025-01-17T16:09:05Z"
    phase: Running
    podIP: 192.168.74.83
    podIPs:
    - ip: 192.168.74.83
    qosClass: Burstable
    startTime: "2025-01-17T16:09:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:32:27Z"
    generateName: aws-node-
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/name: aws-node
      controller-revision-hash: 57d7b87ccb
      k8s-app: aws-node
      pod-template-generation: "1"
    name: aws-node-z4pf6
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 7dc73c45-15a7-4368-bb69-29dd29dba1a2
    resourceVersion: "36547"
    uid: b72e86e4-021d-43ab-a38a-85a75ac7e8e7
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-75-148.ap-south-1.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: ANNOTATE_POD_IP
        value: "false"
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: CLUSTER_ENDPOINT
        value: https://9B462804DC7B7311092EE08BB01C4870.gr7.ap-south-1.eks.amazonaws.com
      - name: CLUSTER_NAME
        value: basic-cluster-ap
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
        value: "false"
      - name: ENABLE_IPv4
        value: "true"
      - name: ENABLE_IPv6
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: ENABLE_PREFIX_DELEGATION
        value: "false"
      - name: ENABLE_SUBNET_DISCOVERY
        value: "true"
      - name: NETWORK_POLICY_ENFORCING_MODE
        value: standard
      - name: VPC_CNI_VERSION
        value: v1.19.0
      - name: VPC_ID
        value: vpc-078a1aa9f420a2ac9
      - name: WARM_ENI_TARGET
        value: "1"
      - name: WARM_PREFIX_TARGET
        value: "1"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: MY_POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
          - -connect-timeout=5s
          - -rpc-timeout=5s
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 10
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
          - NET_RAW
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9j7pt
        readOnly: true
    - args:
      - --enable-ipv6=false
      - --enable-network-policy=false
      - --enable-cloudwatch-logs=false
      - --enable-policy-event-logs=false
      - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
      - --metrics-bind-addr=:8162
      - --health-probe-bind-addr=:8163
      - --conntrack-cache-cleanup-period=300
      env:
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imagePullPolicy: Always
      name: aws-eks-nodeagent
      resources:
        requests:
          cpu: 25m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /sys/fs/bpf
        name: bpf-pin-path
      - mountPath: /var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9j7pt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      - name: ENABLE_IPv6
        value: "false"
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imagePullPolicy: Always
      name: aws-vpc-cni-init
      resources:
        requests:
          cpu: 25m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-9j7pt
        readOnly: true
    nodeName: ip-192-168-75-148.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /sys/fs/bpf
        type: ""
      name: bpf-pin-path
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - name: kube-api-access-9j7pt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:36Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:38Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:47Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:47Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://22d7522c1e2e796d62613a03fa15a379d7b4a65cc6b2b35f0af1c7ebbe2b68fa
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent@sha256:f3280f090b6c5d3128357d8710db237931f5e1089e8017ab3d9cece429d77954
      lastState: {}
      name: aws-eks-nodeagent
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:46Z"
    - containerID: containerd://c35ed51492be7d962a2526202450450a517ac8fb21b5d20ab14f5458c9656043
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni@sha256:efada7e5222a3376dc170b43b569f4dea762fd58186467c233b512bd6ab5415b
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:42Z"
    hostIP: 192.168.75.148
    hostIPs:
    - ip: 192.168.75.148
    initContainerStatuses:
    - containerID: containerd://ddedffe73ad543377c8a83239c45133f02d3799d7f5f15499463af97efd4d2e8
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init@sha256:ce36e6fc8457a3c79eab29ad7ca86ebc9220056c443e15502eeab7ceeef8496f
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://ddedffe73ad543377c8a83239c45133f02d3799d7f5f15499463af97efd4d2e8
          exitCode: 0
          finishedAt: "2025-01-17T18:32:36Z"
          reason: Completed
          startedAt: "2025-01-17T18:32:36Z"
    phase: Running
    podIP: 192.168.75.148
    podIPs:
    - ip: 192.168.75.148
    qosClass: Burstable
    startTime: "2025-01-17T18:32:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      prometheus.io/port: "8085"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-01-17T17:17:47Z"
    generateName: cluster-autoscaler-7fbdc669b9-
    labels:
      app: cluster-autoscaler
      pod-template-hash: 7fbdc669b9
    name: cluster-autoscaler-7fbdc669b9-qdv7t
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: cluster-autoscaler-7fbdc669b9
      uid: 67664fc5-7c54-42d3-a539-247f1db67989
    resourceVersion: "16089"
    uid: 82148287-86c3-4841-8a43-e303666d192a
  spec:
    containers:
    - command:
      - ./cluster-autoscaler
      - --v=4
      - --stderrthreshold=info
      - --cloud-provider=aws
      - --skip-nodes-with-local-storage=false
      - --expander=least-waste
      - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/basic-cluster-ap
      env:
      - name: AWS_REGION
        value: ap-south-1
      - name: AWS_STS_REGIONAL_ENDPOINTS
        value: regional
      - name: AWS_ROLE_ARN
        value: arn:aws:iam::306093656765:role/eksctl-basic-cluster-ap-addon-iamserviceaccou-Role1-BIbHmiIHtJwe
      - name: AWS_WEB_IDENTITY_TOKEN_FILE
        value: /var/run/secrets/eks.amazonaws.com/serviceaccount/token
      image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.26.2
      imagePullPolicy: Always
      name: cluster-autoscaler
      resources:
        limits:
          cpu: 100m
          memory: 600Mi
        requests:
          cpu: 100m
          memory: 600Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/ssl/certs/ca-certificates.crt
        name: ssl-certs
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-h9bg8
        readOnly: true
      - mountPath: /var/run/secrets/eks.amazonaws.com/serviceaccount
        name: aws-iam-token
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 65534
      runAsNonRoot: true
      runAsUser: 65534
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: cluster-autoscaler
    serviceAccountName: cluster-autoscaler
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: aws-iam-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
    - hostPath:
        path: /etc/ssl/certs/ca-bundle.crt
        type: ""
      name: ssl-certs
    - name: kube-api-access-h9bg8
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:17:51Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:17:47Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:17:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:17:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:17:47Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f6a89bfd4eb31766a07ae135d92a180f90448f66e09df3e5c0cfcaf993227fe7
      image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.26.2
      imageID: registry.k8s.io/autoscaling/cluster-autoscaler@sha256:fe25585a9b4bbf85bb3ee0ea4f84187683b9106f2838f28d8717a6fdacb84501
      lastState: {}
      name: cluster-autoscaler
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T17:17:51Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.81.114
    podIPs:
    - ip: 192.168.81.114
    qosClass: Guaranteed
    startTime: "2025-01-17T17:17:47Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T16:06:11Z"
    generateName: coredns-6c55b85fbb-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 6c55b85fbb
    name: coredns-6c55b85fbb-qwpc8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-6c55b85fbb
      uid: ec7f6ab9-6ae8-40f0-accb-9084295e6fee
    resourceVersion: "1493"
    uid: f9b0737b-f9de-42aa-bcb4-714f65f7826a
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns:v1.11.1-eksbuild.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-2dgrl
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          k8s-app: kube-dns
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-2dgrl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:20Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:17Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:17Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2c6ec910140b508956fe4407d6d2b02d54e64669298e52b180f0451b42f03665
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns:v1.11.1-eksbuild.8
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns@sha256:d21885a6632343ecd25d468b54681a0bd512055174bb17bc35a08cb38a965f12
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:09:19Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.82.202
    podIPs:
    - ip: 192.168.82.202
    qosClass: Burstable
    startTime: "2025-01-17T16:09:17Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T16:06:11Z"
    generateName: coredns-6c55b85fbb-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 6c55b85fbb
    name: coredns-6c55b85fbb-vwdvj
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-6c55b85fbb
      uid: ec7f6ab9-6ae8-40f0-accb-9084295e6fee
    resourceVersion: "1495"
    uid: c6cb880c-b788-4a7d-a21f-232263017892
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: kubernetes.io/os
              operator: In
              values:
              - linux
            - key: kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns:v1.11.1-eksbuild.8
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /ready
          port: 8181
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - ALL
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mkwlr
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          k8s-app: kube-dns
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: kube-api-access-mkwlr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:20Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:20Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:20Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://af692715ed947f80e32eee6cf2346fcff767d181a65376e75048d854822bcc0b
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns:v1.11.1-eksbuild.8
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns@sha256:d21885a6632343ecd25d468b54681a0bd512055174bb17bc35a08cb38a965f12
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:09:19Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.89.195
    podIPs:
    - ip: 192.168.89.195
    qosClass: Burstable
    startTime: "2025-01-17T16:09:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T16:09:02Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 7fd767b46d
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-6z7cb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 8df337e2-3421-47df-8e19-b0226771b1d3
    resourceVersion: "1396"
    uid: bb9bd277-61ee-417f-8cdc-399fdf24e955
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-74-83.ap-south-1.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-p2glm
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-p2glm
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:06Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:03Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:06Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:06Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:09:02Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://daf571518c7bef99f1b0fefcef1a644f7414ea792f154fcfbda826e9fb4653f2
      image: 066635153087.dkr.ecr.il-central-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imageID: sha256:bc2394dbfc1cad4de38d472352bf9cc075e66829e390a27bf1d906fc429f758a
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:09:05Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.74.83
    podIPs:
    - ip: 192.168.74.83
    qosClass: Burstable
    startTime: "2025-01-17T16:09:03Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:32:29Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 7fd767b46d
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-8mx2d
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 8df337e2-3421-47df-8e19-b0226771b1d3
    resourceVersion: "36456"
    uid: 7d0f2777-9395-46f1-8bcd-d81952743184
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-32-97.ap-south-1.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tnxfn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-32-97.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-tnxfn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:37Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:29Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:37Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:37Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:29Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b39974afc1d7ac7bac191984461123c6e9afb3e5f8a68f61a3d9c14cbfa19537
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy@sha256:5ed7b40f2b07b992318718d8264324747ecc24b4ea8fab26095b8e569980eff6
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:37Z"
    hostIP: 192.168.32.97
    hostIPs:
    - ip: 192.168.32.97
    phase: Running
    podIP: 192.168.32.97
    podIPs:
    - ip: 192.168.32.97
    qosClass: Burstable
    startTime: "2025-01-17T18:32:29Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:32:27Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 7fd767b46d
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-qxff8
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 8df337e2-3421-47df-8e19-b0226771b1d3
    resourceVersion: "36434"
    uid: 56c16d0b-1b94-44dd-a4c8-afd902387361
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-75-148.ap-south-1.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-r9d4t
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-75-148.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-r9d4t
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:35Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e9679e7c4c46f79ff68830b5565f120587526ade061e86836da960eeb6a4c13b
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy@sha256:5ed7b40f2b07b992318718d8264324747ecc24b4ea8fab26095b8e569980eff6
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:35Z"
    hostIP: 192.168.75.148
    hostIPs:
    - ip: 192.168.75.148
    phase: Running
    podIP: 192.168.75.148
    podIPs:
    - ip: 192.168.75.148
    qosClass: Burstable
    startTime: "2025-01-17T18:32:27Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T17:18:06Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 7fd767b46d
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-rt7z6
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 8df337e2-3421-47df-8e19-b0226771b1d3
    resourceVersion: "16226"
    uid: 74fc5d7d-e413-4fc4-b639-bb541413f867
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-19-29.ap-south-1.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-92gbz
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-19-29.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-92gbz
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:15Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:15Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:15Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T17:18:06Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://f07a5ff3fe9570d5922761a645c396b02c6c2a3247e132b27b1cb9a3587d91cf
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy@sha256:5ed7b40f2b07b992318718d8264324747ecc24b4ea8fab26095b8e569980eff6
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T17:18:14Z"
    hostIP: 192.168.19.29
    hostIPs:
    - ip: 192.168.19.29
    phase: Running
    podIP: 192.168.19.29
    podIPs:
    - ip: 192.168.19.29
    qosClass: Burstable
    startTime: "2025-01-17T17:18:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:32:08Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 7fd767b46d
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-z7zp5
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 8df337e2-3421-47df-8e19-b0226771b1d3
    resourceVersion: "36229"
    uid: d0db46dc-c53e-4263-bf69-69918e746d31
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-36-63.ap-south-1.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nr4zz
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-36-63.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-nr4zz
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:17Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:08Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:17Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:17Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:32:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://b1ff0281e93934c6afbb67ee497b9ac48a9c2562f1cfb794c6e5612755ee35f8
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy@sha256:5ed7b40f2b07b992318718d8264324747ecc24b4ea8fab26095b8e569980eff6
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:32:16Z"
    hostIP: 192.168.36.63
    hostIPs:
    - ip: 192.168.36.63
    phase: Running
    podIP: 192.168.36.63
    podIPs:
    - ip: 192.168.36.63
    qosClass: Burstable
    startTime: "2025-01-17T18:32:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:26:27Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 7fd767b46d
      k8s-app: kube-proxy
      pod-template-generation: "1"
    name: kube-proxy-zr8vd
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 8df337e2-3421-47df-8e19-b0226771b1d3
    resourceVersion: "34729"
    uid: 2423e327-af8a-4c5a-ab4d-8a91fd3b608e
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-70-3.ap-south-1.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      - --hostname-override=$(NODE_NAME)
      env:
      - name: NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-txzqx
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-70-3.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-api-access-txzqx
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:35Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:26Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:27Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://150e91fefaef964fb7752d385b995dd7b1f42dbb32a9c386c2cbac272b76215d
      image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
      imageID: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy@sha256:5ed7b40f2b07b992318718d8264324747ecc24b4ea8fab26095b8e569980eff6
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:26:34Z"
    hostIP: 192.168.70.3
    hostIPs:
    - ip: 192.168.70.3
    phase: Running
    podIP: 192.168.70.3
    podIPs:
    - ip: 192.168.70.3
    qosClass: Burstable
    startTime: "2025-01-17T18:26:26Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T16:18:15Z"
    generateName: metrics-server-fd7d8565c-
    labels:
      k8s-app: metrics-server
      pod-template-hash: fd7d8565c
    name: metrics-server-fd7d8565c-ktw7k
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: metrics-server-fd7d8565c
      uid: 3d59120d-4096-47ff-bb68-0e44a4942fc5
    resourceVersion: "3253"
    uid: d34099e4-912c-4e84-94af-a9e08e90130b
  spec:
    containers:
    - args:
      - --cert-dir=/tmp
      - --secure-port=4443
      - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
      - --kubelet-use-node-status-port
      - --metric-resolution=15s
      - --kubelet-insecure-tls
      image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /livez
          port: https
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: metrics-server
      ports:
      - containerPort: 4443
        hostPort: 4443
        name: https
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: https
          scheme: HTTPS
        initialDelaySeconds: 20
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4lsfg
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    nodeSelector:
      kubernetes.io/os: linux
    preemptionPolicy: PreemptLowerPriority
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: metrics-server
    serviceAccountName: metrics-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-dir
    - name: kube-api-access-4lsfg
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:18:17Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:18:15Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:18:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:18:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:18:15Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9aa3b4fde53c55f0ba2cdb5f4152db635099dcab8b6df96d8369e393a7ecfd8b
      image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
      imageID: registry.k8s.io/metrics-server/metrics-server@sha256:ffcb2bf004d6aa0a17d90e0247cf94f2865c8901dcab4427034c341951c239f9
      lastState: {}
      name: metrics-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:18:16Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.74.83
    podIPs:
    - ip: 192.168.74.83
    qosClass: Burstable
    startTime: "2025-01-17T16:18:15Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: 4120fc2e9bcc3a7388ff0cb301cdf95879006bb0a8b7c4937639330b49b9f16b
    creationTimestamp: "2025-01-17T16:20:37Z"
    generateName: kubernetes-dashboard-api-788d598bb4-
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-api
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.10.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
      pod-template-hash: 788d598bb4
    name: kubernetes-dashboard-api-788d598bb4-zhfp7
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-api-788d598bb4
      uid: 5f389bb2-fac3-46bb-8a63-cf394c3122fb
    resourceVersion: "3831"
    uid: 2333fc1a-860e-42ac-b5df-69bf3624fa4b
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - --namespace=kubernetes-dashboard
      - --metrics-scraper-service-name=kubernetes-dashboard-metrics-scraper
      env:
      - name: CSRF_KEY
        valueFrom:
          secretKeyRef:
            key: private.key
            name: kubernetes-dashboard-csrf
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      image: docker.io/kubernetesui/dashboard-api:1.10.2
      imagePullPolicy: IfNotPresent
      name: kubernetes-dashboard-api
      ports:
      - containerPort: 8000
        name: api
        protocol: TCP
      resources:
        limits:
          cpu: 250m
          memory: 400Mi
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tr6km
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: kubernetes-dashboard-api
    serviceAccountName: kubernetes-dashboard-api
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kube-api-access-tr6km
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5e8bca3ff7b310d9b8834c4db320673fb718dff7df4b6524f1c4cb8f22befd87
      image: docker.io/kubernetesui/dashboard-api:1.10.2
      imageID: docker.io/kubernetesui/dashboard-api@sha256:5d1df36a99f2e0afb4ab4fd9f98b7f72bf5aee013108a0225be68c17913cad17
      lastState: {}
      name: kubernetes-dashboard-api
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:20:44Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.72.91
    podIPs:
    - ip: 192.168.72.91
    qosClass: Burstable
    startTime: "2025-01-17T16:20:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      checksum/config: b02c5dabe20ad1806f40c78c0168648afb96cfd04d599ebfe5661c6409a424f1
    creationTimestamp: "2025-01-17T16:20:37Z"
    generateName: kubernetes-dashboard-auth-7899756b44-
    labels:
      app.kubernetes.io/component: auth
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-auth
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.2.3
      helm.sh/chart: kubernetes-dashboard-7.10.1
      pod-template-hash: 7899756b44
    name: kubernetes-dashboard-auth-7899756b44-69wt9
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-auth-7899756b44
      uid: 30a37fcc-3866-4c61-8efb-caf1d6ff7989
    resourceVersion: "3821"
    uid: 3bc1ca47-d4bd-4ba4-b35d-80fc7b938e33
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: CSRF_KEY
        valueFrom:
          secretKeyRef:
            key: private.key
            name: kubernetes-dashboard-csrf
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      image: docker.io/kubernetesui/dashboard-auth:1.2.3
      imagePullPolicy: IfNotPresent
      name: kubernetes-dashboard-auth
      ports:
      - containerPort: 8000
        name: auth
        protocol: TCP
      resources:
        limits:
          cpu: 250m
          memory: 400Mi
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-bbpwl
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kube-api-access-bbpwl
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://a68be7816815cd9b834ca5813cfc1deba6e81cc21236efa0dac65eeaaed156e8
      image: docker.io/kubernetesui/dashboard-auth:1.2.3
      imageID: docker.io/kubernetesui/dashboard-auth@sha256:af2a00ac93d53ad9f5d7673605c8d56e76ff241baeda416762a6762fcaf62ba0
      lastState: {}
      name: kubernetes-dashboard-auth
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:20:43Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.84.139
    podIPs:
    - ip: 192.168.84.139
    qosClass: Burstable
    startTime: "2025-01-17T16:20:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kuma.io/gateway: enabled
      kuma.io/service-account-token-volume: kubernetes-dashboard-kong-token
      traffic.sidecar.istio.io/includeInboundPorts: ""
    creationTimestamp: "2025-01-17T16:20:37Z"
    generateName: kubernetes-dashboard-kong-78fd98d579-
    labels:
      app: kubernetes-dashboard-kong
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.8"
      helm.sh/chart: kong-2.46.0
      pod-template-hash: 78fd98d579
      version: "3.8"
    name: kubernetes-dashboard-kong-78fd98d579-xxg8z
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-kong-78fd98d579
      uid: 3cc80328-b269-4f13-a034-902861ff4c78
    resourceVersion: "3902"
    uid: bb01c9e1-a93f-497f-991b-d94a1a4047f0
  spec:
    automountServiceAccountToken: false
    containers:
    - env:
      - name: KONG_ADMIN_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_ADMIN_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ADMIN_GUI_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_ADMIN_GUI_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ADMIN_LISTEN
        value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
      - name: KONG_CLUSTER_LISTEN
        value: "off"
      - name: KONG_DATABASE
        value: "off"
      - name: KONG_DECLARATIVE_CONFIG
        value: /kong_dbless/kong.yml
      - name: KONG_DNS_ORDER
        value: LAST,A,CNAME,AAAA,SRV
      - name: KONG_LUA_PACKAGE_PATH
        value: /opt/?.lua;/opt/?/init.lua;;
      - name: KONG_NGINX_WORKER_PROCESSES
        value: "1"
      - name: KONG_PLUGINS
        value: "off"
      - name: KONG_PORTAL_API_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_PORTAL_API_ERROR_LOG
        value: /dev/stderr
      - name: KONG_PORT_MAPS
        value: 443:8443
      - name: KONG_PREFIX
        value: /kong_prefix/
      - name: KONG_PROXY_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_PROXY_ERROR_LOG
        value: /dev/stderr
      - name: KONG_PROXY_LISTEN
        value: 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl
      - name: KONG_PROXY_STREAM_ACCESS_LOG
        value: /dev/stdout basic
      - name: KONG_PROXY_STREAM_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ROUTER_FLAVOR
        value: traditional
      - name: KONG_STATUS_ACCESS_LOG
        value: "off"
      - name: KONG_STATUS_ERROR_LOG
        value: /dev/stderr
      - name: KONG_STATUS_LISTEN
        value: 0.0.0.0:8100, [::]:8100
      - name: KONG_STREAM_LISTEN
        value: "off"
      - name: KONG_NGINX_DAEMON
        value: "off"
      image: kong:3.8
      imagePullPolicy: IfNotPresent
      lifecycle:
        preStop:
          exec:
            command:
            - kong
            - quit
            - --wait=15
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /status
          port: status
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: proxy
      ports:
      - containerPort: 8443
        name: proxy-tls
        protocol: TCP
      - containerPort: 8100
        name: status
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /status/ready
          port: status
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kong_prefix/
        name: kubernetes-dashboard-kong-prefix-dir
      - mountPath: /tmp
        name: kubernetes-dashboard-kong-tmp
      - mountPath: /kong_dbless/
        name: kong-custom-dbless-config-volume
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    initContainers:
    - command:
      - rm
      - -vrf
      - $KONG_PREFIX/pids
      env:
      - name: KONG_ADMIN_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_ADMIN_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ADMIN_GUI_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_ADMIN_GUI_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ADMIN_LISTEN
        value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
      - name: KONG_CLUSTER_LISTEN
        value: "off"
      - name: KONG_DATABASE
        value: "off"
      - name: KONG_DECLARATIVE_CONFIG
        value: /kong_dbless/kong.yml
      - name: KONG_DNS_ORDER
        value: LAST,A,CNAME,AAAA,SRV
      - name: KONG_LUA_PACKAGE_PATH
        value: /opt/?.lua;/opt/?/init.lua;;
      - name: KONG_NGINX_WORKER_PROCESSES
        value: "1"
      - name: KONG_PLUGINS
        value: "off"
      - name: KONG_PORTAL_API_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_PORTAL_API_ERROR_LOG
        value: /dev/stderr
      - name: KONG_PORT_MAPS
        value: 443:8443
      - name: KONG_PREFIX
        value: /kong_prefix/
      - name: KONG_PROXY_ACCESS_LOG
        value: /dev/stdout
      - name: KONG_PROXY_ERROR_LOG
        value: /dev/stderr
      - name: KONG_PROXY_LISTEN
        value: 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl
      - name: KONG_PROXY_STREAM_ACCESS_LOG
        value: /dev/stdout basic
      - name: KONG_PROXY_STREAM_ERROR_LOG
        value: /dev/stderr
      - name: KONG_ROUTER_FLAVOR
        value: traditional
      - name: KONG_STATUS_ACCESS_LOG
        value: "off"
      - name: KONG_STATUS_ERROR_LOG
        value: /dev/stderr
      - name: KONG_STATUS_LISTEN
        value: 0.0.0.0:8100, [::]:8100
      - name: KONG_STREAM_LISTEN
        value: "off"
      image: kong:3.8
      imagePullPolicy: IfNotPresent
      name: clear-stale-pid
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /kong_prefix/
        name: kubernetes-dashboard-kong-prefix-dir
      - mountPath: /tmp
        name: kubernetes-dashboard-kong-tmp
      - mountPath: /kong_dbless/
        name: kong-custom-dbless-config-volume
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kubernetes-dashboard-kong
    serviceAccountName: kubernetes-dashboard-kong
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir:
        sizeLimit: 256Mi
      name: kubernetes-dashboard-kong-prefix-dir
    - emptyDir:
        sizeLimit: 1Gi
      name: kubernetes-dashboard-kong-tmp
    - name: kubernetes-dashboard-kong-token
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
    - configMap:
        defaultMode: 420
        name: kong-dbless-config
      name: kong-custom-dbless-config-volume
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:47Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:52Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://6c88080f154477045020f74d56aa3ef1f05914af5640c391d0c830791f1a9e02
      image: docker.io/library/kong:3.8
      imageID: docker.io/library/kong@sha256:616b2ab5a4c7b6c14022e8a1495ff34930ced76f25f3d418e76758717fec335f
      lastState: {}
      name: proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:20:52Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    initContainerStatuses:
    - containerID: containerd://18e8ac5dbc8ebdafc5ee9704b79ee340a9df1930701b4dfd1c8f1ea115baf8dd
      image: docker.io/library/kong:3.8
      imageID: docker.io/library/kong@sha256:616b2ab5a4c7b6c14022e8a1495ff34930ced76f25f3d418e76758717fec335f
      lastState: {}
      name: clear-stale-pid
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: containerd://18e8ac5dbc8ebdafc5ee9704b79ee340a9df1930701b4dfd1c8f1ea115baf8dd
          exitCode: 0
          finishedAt: "2025-01-17T16:20:47Z"
          reason: Completed
          startedAt: "2025-01-17T16:20:47Z"
    phase: Running
    podIP: 192.168.95.142
    podIPs:
    - ip: 192.168.95.142
    qosClass: BestEffort
    startTime: "2025-01-17T16:20:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T16:20:37Z"
    generateName: kubernetes-dashboard-metrics-scraper-6c8d6bb74d-
    labels:
      app.kubernetes.io/component: metrics-scraper
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.2.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
      pod-template-hash: 6c8d6bb74d
    name: kubernetes-dashboard-metrics-scraper-6c8d6bb74d-bgzdb
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-metrics-scraper-6c8d6bb74d
      uid: a3de5482-2d8f-4dee-a1b0-d4efc8f111c8
    resourceVersion: "3825"
    uid: 261adb79-5d74-48ab-9030-33dbf97b25ae
  spec:
    automountServiceAccountToken: true
    containers:
    - env:
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      image: docker.io/kubernetesui/dashboard-metrics-scraper:1.2.2
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /
          port: 8000
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 30
      name: kubernetes-dashboard-metrics-scraper
      ports:
      - containerPort: 8000
        protocol: TCP
      resources:
        limits:
          cpu: 250m
          memory: 400Mi
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-6rspt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: kubernetes-dashboard-metrics-scraper
    serviceAccountName: kubernetes-dashboard-metrics-scraper
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kube-api-access-6rspt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:44Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://7a6e8f0666a7bfb82a44a86f65cdaae1c53a234cc5c60248c5aabc63b62ad94f
      image: docker.io/kubernetesui/dashboard-metrics-scraper:1.2.2
      imageID: docker.io/kubernetesui/dashboard-metrics-scraper@sha256:5154b68252bd601cf85092b6413cb9db224af1ef89cb53009d2070dfccd30775
      lastState: {}
      name: kubernetes-dashboard-metrics-scraper
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:20:43Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.65.221
    podIPs:
    - ip: 192.168.65.221
    qosClass: Burstable
    startTime: "2025-01-17T16:20:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T16:20:37Z"
    generateName: kubernetes-dashboard-web-86495b6c8f-
    labels:
      app.kubernetes.io/component: web
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-web
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.6.1
      helm.sh/chart: kubernetes-dashboard-7.10.1
      pod-template-hash: 86495b6c8f
    name: kubernetes-dashboard-web-86495b6c8f-fbl9d
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: kubernetes-dashboard-web-86495b6c8f
      uid: e7017b54-caac-47fd-bf59-05a0bb6ed48c
    resourceVersion: "3843"
    uid: b0f90a7e-81fc-4404-ab0b-2d4023e5e58d
  spec:
    automountServiceAccountToken: true
    containers:
    - args:
      - --namespace=kubernetes-dashboard
      - --settings-config-map-name=kubernetes-dashboard-web-settings
      env:
      - name: GOMAXPROCS
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.cpu
      - name: GOMEMLIMIT
        valueFrom:
          resourceFieldRef:
            divisor: "1"
            resource: limits.memory
      image: docker.io/kubernetesui/dashboard-web:1.6.1
      imagePullPolicy: IfNotPresent
      name: kubernetes-dashboard-web
      ports:
      - containerPort: 8000
        name: web
        protocol: TCP
      resources:
        limits:
          cpu: 250m
          memory: 400Mi
        requests:
          cpu: 100m
          memory: 200Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsGroup: 2001
        runAsUser: 1001
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-tbb8k
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: kubernetes-dashboard-web
    serviceAccountName: kubernetes-dashboard-web
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp-volume
    - name: kube-api-access-tbb8k
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:45Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T16:20:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://979950edcbc11c100dc977bc67061e67ac642f427d457f037f1848ac2fcd3636
      image: docker.io/kubernetesui/dashboard-web:1.6.1
      imageID: docker.io/kubernetesui/dashboard-web@sha256:06a9bb6993c3763d7d2b83da7250cc6cbed69b96f9fd856d403eb717a87770c9
      lastState: {}
      name: kubernetes-dashboard-web
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T16:20:45Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.72.160
    podIPs:
    - ip: 192.168.72.160
    qosClass: Burstable
    startTime: "2025-01-17T16:20:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:25:32Z"
    generateName: model-server-7bb6747795-
    labels:
      app.kubernetes.io/name: model-server
      pod-template-hash: 7bb6747795
    name: model-server-7bb6747795-hmcnf
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: model-server-7bb6747795
      uid: 8ee729ce-829c-40b0-bd0c-b2c1ed080c28
    resourceVersion: "34413"
    uid: bb1cd54e-c3db-48c4-a089-179f798fb230
  spec:
    containers:
    - env:
      - name: REDIS_HOST
        valueFrom:
          configMapKeyRef:
            key: hostname
            name: redis-config-v1
      - name: REDIS_PORT
        valueFrom:
          configMapKeyRef:
            key: port
            name: redis-config-v1
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: db_password
            name: redis-secret-v1
      - name: MODEL_NAME
        valueFrom:
          configMapKeyRef:
            key: model_name
            name: model-server-config-v1
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server:latest
      imagePullPolicy: IfNotPresent
      name: model-server
      ports:
      - containerPort: 80
        protocol: TCP
      resources:
        limits:
          cpu: "1"
          memory: 800Mi
        requests:
          cpu: 600m
          memory: 600Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-xxb6h
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-19-29.ap-south-1.compute.internal
    nodeSelector:
      role: spot
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-xxb6h
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://0d055d8e3132e2318862cebb7613a23ea24f56ce1a7239ba2f63dfc3b9725919
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server:latest
      imageID: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server@sha256:601bde0fc70a092ab4c4f45417ea51f5f7627c81cb9de1410baf0257204657be
      lastState: {}
      name: model-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:25:33Z"
    hostIP: 192.168.19.29
    hostIPs:
    - ip: 192.168.19.29
    phase: Running
    podIP: 192.168.19.252
    podIPs:
    - ip: 192.168.19.252
    qosClass: Burstable
    startTime: "2025-01-17T18:25:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:25:47Z"
    generateName: model-server-7bb6747795-
    labels:
      app.kubernetes.io/name: model-server
      pod-template-hash: 7bb6747795
    name: model-server-7bb6747795-hnb7l
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: model-server-7bb6747795
      uid: 8ee729ce-829c-40b0-bd0c-b2c1ed080c28
    resourceVersion: "34912"
    uid: 749ed188-c17d-420f-ba34-973a383ab5e6
  spec:
    containers:
    - env:
      - name: REDIS_HOST
        valueFrom:
          configMapKeyRef:
            key: hostname
            name: redis-config-v1
      - name: REDIS_PORT
        valueFrom:
          configMapKeyRef:
            key: port
            name: redis-config-v1
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: db_password
            name: redis-secret-v1
      - name: MODEL_NAME
        valueFrom:
          configMapKeyRef:
            key: model_name
            name: model-server-config-v1
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server:latest
      imagePullPolicy: IfNotPresent
      name: model-server
      ports:
      - containerPort: 80
        protocol: TCP
      resources:
        limits:
          cpu: "1"
          memory: 800Mi
        requests:
          cpu: 600m
          memory: 600Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-5j44r
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-70-3.ap-south-1.compute.internal
    nodeSelector:
      role: spot
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-5j44r
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:27:12Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:44Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:27:12Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:27:12Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:26:44Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://536d9aba5731ca2910b9b6adef9e7c23e52a732ac68939348b75870266be2cc2
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server:latest
      imageID: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server@sha256:601bde0fc70a092ab4c4f45417ea51f5f7627c81cb9de1410baf0257204657be
      lastState: {}
      name: model-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:27:12Z"
    hostIP: 192.168.70.3
    hostIPs:
    - ip: 192.168.70.3
    phase: Running
    podIP: 192.168.71.237
    podIPs:
    - ip: 192.168.71.237
    qosClass: Burstable
    startTime: "2025-01-17T18:26:44Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:25:32Z"
    generateName: model-server-7bb6747795-
    labels:
      app.kubernetes.io/name: model-server
      pod-template-hash: 7bb6747795
    name: model-server-7bb6747795-p9qf7
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: model-server-7bb6747795
      uid: 8ee729ce-829c-40b0-bd0c-b2c1ed080c28
    resourceVersion: "34409"
    uid: 36b04ea3-caa2-4e7b-a9b2-4572dfd4da7d
  spec:
    containers:
    - env:
      - name: REDIS_HOST
        valueFrom:
          configMapKeyRef:
            key: hostname
            name: redis-config-v1
      - name: REDIS_PORT
        valueFrom:
          configMapKeyRef:
            key: port
            name: redis-config-v1
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: db_password
            name: redis-secret-v1
      - name: MODEL_NAME
        valueFrom:
          configMapKeyRef:
            key: model_name
            name: model-server-config-v1
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server:latest
      imagePullPolicy: IfNotPresent
      name: model-server
      ports:
      - containerPort: 80
        protocol: TCP
      resources:
        limits:
          cpu: "1"
          memory: 800Mi
        requests:
          cpu: 600m
          memory: 600Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-4wc7k
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-19-29.ap-south-1.compute.internal
    nodeSelector:
      role: spot
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-4wc7k
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:34Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:34Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:34Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://5224abcaee16c76edae3c8fa214c489f8a916bff4fdf3852acc91ea203b172cb
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server:latest
      imageID: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server@sha256:601bde0fc70a092ab4c4f45417ea51f5f7627c81cb9de1410baf0257204657be
      lastState: {}
      name: model-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:25:33Z"
    hostIP: 192.168.19.29
    hostIPs:
    - ip: 192.168.19.29
    phase: Running
    podIP: 192.168.30.156
    podIPs:
    - ip: 192.168.30.156
    qosClass: Burstable
    startTime: "2025-01-17T18:25:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:25:32Z"
    generateName: redis-5b8fb894df-
    labels:
      app.kubernetes.io/name: redis
      pod-template-hash: 5b8fb894df
      role: master
    name: redis-5b8fb894df-d9xxp
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: redis-5b8fb894df
      uid: 47ffae0c-206a-4666-9fc7-59802a6169fc
    resourceVersion: "34402"
    uid: 71c8ff3b-bf5d-4f74-b842-d0536fbd7fdf
  spec:
    containers:
    - args:
      - --requirepass
      - $(REDIS_PASSWORD)
      command:
      - redis-server
      env:
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: db_password
            name: redis-secret-v1
      image: redis:7.4.1
      imagePullPolicy: IfNotPresent
      name: redis
      ports:
      - containerPort: 6379
        name: redis
        protocol: TCP
      resources:
        limits:
          cpu: 200m
          memory: 200Mi
        requests:
          cpu: 200m
          memory: 200Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /data
        name: redis-storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-qvllt
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: redis-storage
      persistentVolumeClaim:
        claimName: redis-pvc
    - name: kube-api-access-qvllt
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://54fe22fcf57ad77e584e90e13ac3dbff7facefcdd3b64dddc1d13f85120adf96
      image: docker.io/library/redis:7.4.1
      imageID: docker.io/library/redis@sha256:bb142a9c18ac18a16713c1491d779697b4e107c22a97266616099d288237ef47
      lastState: {}
      name: redis
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:25:32Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.72.12
    podIPs:
    - ip: 192.168.72.12
    qosClass: Guaranteed
    startTime: "2025-01-17T18:25:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:25:32Z"
    generateName: ui-server-6f5d6cc767-
    labels:
      app.kubernetes.io/name: ui-server
      pod-template-hash: 6f5d6cc767
    name: ui-server-6f5d6cc767-ddtfs
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: ui-server-6f5d6cc767
      uid: 4855a70f-38da-4c70-80b2-f0a6749822b4
    resourceVersion: "34397"
    uid: 622da9dc-8fee-448b-bbe2-6803cce566a7
  spec:
    containers:
    - env:
      - name: WEB_SERVER_URL
        valueFrom:
          configMapKeyRef:
            key: web_server_url
            name: web-server-config-v1
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/ui-server:latest
      imagePullPolicy: IfNotPresent
      name: ui-server
      ports:
      - containerPort: 80
        protocol: TCP
      resources:
        limits:
          cpu: 500m
          memory: 1536Mi
        requests:
          cpu: 250m
          memory: 768Mi
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-69fgf
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-69fgf
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://2ccf82c86d048368a872c95b91aa1f6a483726190740ba345b8fcad90a9c8928
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/ui-server:latest
      imageID: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/ui-server@sha256:b568a3b5e0f17f3b11a5bac5d069a7f84921474b4d3e979774ea1058154c1cc0
      lastState: {}
      name: ui-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:25:32Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.92.211
    podIPs:
    - ip: 192.168.92.211
    qosClass: Burstable
    startTime: "2025-01-17T18:25:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:25:32Z"
    generateName: web-server-57f65b996d-
    labels:
      app.kubernetes.io/name: web-server
      pod-template-hash: 57f65b996d
    name: web-server-57f65b996d-csgbd
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: web-server-57f65b996d
      uid: 414055a5-7fea-4ca5-b913-a8d2e3724a5c
    resourceVersion: "34424"
    uid: eff727bb-d071-4aa6-89c0-b7b3169e8e99
  spec:
    containers:
    - env:
      - name: REDIS_HOST
        valueFrom:
          configMapKeyRef:
            key: hostname
            name: redis-config-v1
      - name: REDIS_PORT
        valueFrom:
          configMapKeyRef:
            key: port
            name: redis-config-v1
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: db_password
            name: redis-secret-v1
      - name: MODEL_SERVER_URL
        valueFrom:
          configMapKeyRef:
            key: model_server_url
            name: model-server-config-v1
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/web-server:latest
      imagePullPolicy: IfNotPresent
      name: web-server
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-262tr
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-19-29.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-262tr
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:35Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:35Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:35Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://77f009b6af47456e7d1a8ca66b349eba776ff62f9edc3558f342de1667078c58
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/web-server:latest
      imageID: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/web-server@sha256:7ac8ff21b42a3c5271fb02983fb49549a912353840a1b1a6f8684c27ef6a3098
      lastState: {}
      name: web-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:25:34Z"
    hostIP: 192.168.19.29
    hostIPs:
    - ip: 192.168.19.29
    phase: Running
    podIP: 192.168.0.4
    podIPs:
    - ip: 192.168.0.4
    qosClass: BestEffort
    startTime: "2025-01-17T18:25:32Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-01-17T18:25:32Z"
    generateName: web-server-57f65b996d-
    labels:
      app.kubernetes.io/name: web-server
      pod-template-hash: 57f65b996d
    name: web-server-57f65b996d-nmrt8
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: web-server-57f65b996d
      uid: 414055a5-7fea-4ca5-b913-a8d2e3724a5c
    resourceVersion: "34392"
    uid: 2de97c7e-fd02-4a09-a464-c3ac046629d9
  spec:
    containers:
    - env:
      - name: REDIS_HOST
        valueFrom:
          configMapKeyRef:
            key: hostname
            name: redis-config-v1
      - name: REDIS_PORT
        valueFrom:
          configMapKeyRef:
            key: port
            name: redis-config-v1
      - name: REDIS_PASSWORD
        valueFrom:
          secretKeyRef:
            key: db_password
            name: redis-secret-v1
      - name: MODEL_SERVER_URL
        valueFrom:
          configMapKeyRef:
            key: model_server_url
            name: model-server-config-v1
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/web-server:latest
      imagePullPolicy: IfNotPresent
      name: web-server
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-vlkq4
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: ip-192-168-74-83.ap-south-1.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-vlkq4
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:33Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-01-17T18:25:32Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://bdf6524bf44364847375c0cb9ccb2a3b36e11f61500cc77e86fb8bf8df53085e
      image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/web-server:latest
      imageID: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/web-server@sha256:7ac8ff21b42a3c5271fb02983fb49549a912353840a1b1a6f8684c27ef6a3098
      lastState: {}
      name: web-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-01-17T18:25:32Z"
    hostIP: 192.168.74.83
    hostIPs:
    - ip: 192.168.74.83
    phase: Running
    podIP: 192.168.77.236
    podIPs:
    - ip: 192.168.77.236
    qosClass: BestEffort
    startTime: "2025-01-17T18:25:32Z"
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-01-17T16:02:51Z"
    labels:
      component: apiserver
      provider: kubernetes
    name: kubernetes
    namespace: default
    resourceVersion: "193"
    uid: 30c4dfaf-da29-4539-b179-407ed8dd835f
  spec:
    clusterIP: 10.100.0.1
    clusterIPs:
    - 10.100.0.1
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: 443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: aws-load-balancer-controller
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-01-17T17:28:38Z"
    labels:
      app.kubernetes.io/component: webhook
      app.kubernetes.io/instance: aws-load-balancer-controller
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-load-balancer-controller
      app.kubernetes.io/version: v2.11.0
      helm.sh/chart: aws-load-balancer-controller-1.11.0
      prometheus.io/service-monitor: "false"
    name: aws-load-balancer-webhook-service
    namespace: kube-system
    resourceVersion: "19149"
    uid: bf0f26fb-5210-45a0-93b5-c652f2951936
  spec:
    clusterIP: 10.100.239.38
    clusterIPs:
    - 10.100.239.38
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: webhook-server
      port: 443
      protocol: TCP
      targetPort: webhook-server
    selector:
      app.kubernetes.io/instance: aws-load-balancer-controller
      app.kubernetes.io/name: aws-load-balancer-controller
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"name":"eks-extension-metrics-api","namespace":"kube-system"},"spec":{"ports":[{"name":"metrics-api","port":443,"protocol":"TCP","targetPort":10443}]}}
    creationTimestamp: "2025-01-17T16:02:54Z"
    name: eks-extension-metrics-api
    namespace: kube-system
    resourceVersion: "1002"
    uid: 8eff12bb-91fc-449e-ae10-687dc0f8bb39
  spec:
    clusterIP: 10.100.139.9
    clusterIPs:
    - 10.100.139.9
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: metrics-api
      port: 443
      protocol: TCP
      targetPort: 10443
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      prometheus.io/port: "9153"
      prometheus.io/scrape: "true"
    creationTimestamp: "2025-01-17T16:06:11Z"
    labels:
      eks.amazonaws.com/component: kube-dns
      k8s-app: kube-dns
      kubernetes.io/cluster-service: "true"
      kubernetes.io/name: CoreDNS
    name: kube-dns
    namespace: kube-system
    resourceVersion: "878"
    uid: ad731152-a7c2-4633-be6e-c24d835a9156
  spec:
    clusterIP: 10.100.0.10
    clusterIPs:
    - 10.100.0.10
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: dns
      port: 53
      protocol: UDP
      targetPort: 53
    - name: dns-tcp
      port: 53
      protocol: TCP
      targetPort: 53
    - name: metrics
      port: 9153
      protocol: TCP
      targetPort: 9153
    selector:
      k8s-app: kube-dns
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"v1","kind":"Service","metadata":{"annotations":{},"labels":{"k8s-app":"metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"ports":[{"name":"https","port":443,"protocol":"TCP","targetPort":"https"}],"selector":{"k8s-app":"metrics-server"}}}
    creationTimestamp: "2025-01-17T16:17:49Z"
    labels:
      k8s-app: metrics-server
    name: metrics-server
    namespace: kube-system
    resourceVersion: "3055"
    uid: 86150834-ebe0-43ce-9a8b-d41ce4936f9e
  spec:
    clusterIP: 10.100.188.54
    clusterIPs:
    - 10.100.188.54
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    selector:
      k8s-app: metrics-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-api
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.10.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
    name: kubernetes-dashboard-api
    namespace: kubernetes-dashboard
    resourceVersion: "3710"
    uid: 29647ed6-9a78-4cf8-add3-44ffd68ed578
  spec:
    clusterIP: 10.100.33.19
    clusterIPs:
    - 10.100.33.19
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: api
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: kubernetes-dashboard-api
      app.kubernetes.io/part-of: kubernetes-dashboard
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    labels:
      app.kubernetes.io/component: auth
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-auth
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.2.3
      helm.sh/chart: kubernetes-dashboard-7.10.1
    name: kubernetes-dashboard-auth
    namespace: kubernetes-dashboard
    resourceVersion: "3704"
    uid: bbae83bf-9e11-41a6-b13e-0ad71ccb8cd5
  spec:
    clusterIP: 10.100.64.39
    clusterIPs:
    - 10.100.64.39
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: auth
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: kubernetes-dashboard-auth
      app.kubernetes.io/part-of: kubernetes-dashboard
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    labels:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.8"
      enable-metrics: "true"
      helm.sh/chart: kong-2.46.0
    name: kubernetes-dashboard-kong-proxy
    namespace: kubernetes-dashboard
    resourceVersion: "3702"
    uid: 3a35fea1-74e7-492e-9bb0-4e514255511f
  spec:
    clusterIP: 10.100.206.94
    clusterIPs:
    - 10.100.206.94
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: kong-proxy-tls
      port: 443
      protocol: TCP
      targetPort: 8443
    selector:
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: kong
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    labels:
      app.kubernetes.io/component: metrics-scraper
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.2.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
    name: kubernetes-dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "3707"
    uid: ced4936c-b3d6-4c4f-b2de-25d9f8d3e29c
  spec:
    clusterIP: 10.100.10.9
    clusterIPs:
    - 10.100.10.9
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
      app.kubernetes.io/part-of: kubernetes-dashboard
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    labels:
      app.kubernetes.io/component: web
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-web
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.6.1
      helm.sh/chart: kubernetes-dashboard-7.10.1
    name: kubernetes-dashboard-web
    namespace: kubernetes-dashboard
    resourceVersion: "3718"
    uid: 3b8395f7-28ee-4275-ac52-be3a38fbceac
  spec:
    clusterIP: 10.100.152.247
    clusterIPs:
    - 10.100.152.247
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: web
      port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/name: kubernetes-dashboard-web
      app.kubernetes.io/part-of: kubernetes-dashboard
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: model-server
      app.kubernetes.io/part-of: fastapi-app
    name: model-server-service
    namespace: prod
    resourceVersion: "34286"
    uid: 59bd954d-3fa0-4feb-81a7-44e11d695af2
  spec:
    clusterIP: 10.100.42.149
    clusterIPs:
    - 10.100.42.149
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app.kubernetes.io/name: model-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: redis
      app.kubernetes.io/part-of: fastapi-app
      role: master
    name: redis-service
    namespace: prod
    resourceVersion: "34290"
    uid: 7be1b4bf-5de3-43e1-9535-edc567e9ef1f
  spec:
    clusterIP: 10.100.158.140
    clusterIPs:
    - 10.100.158.140
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app.kubernetes.io/name: redis
      role: master
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    labels:
      app.kubernetes.io/instance: fastapi-release-prod
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ui-server
      app.kubernetes.io/part-of: fastapi-app
    name: ui-server-service
    namespace: prod
    resourceVersion: "34296"
    uid: 2e707214-23d5-44d0-9fe2-ad6427ee38fd
  spec:
    clusterIP: 10.100.96.153
    clusterIPs:
    - 10.100.96.153
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app.kubernetes.io/name: ui-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    labels:
      app.kubernetes.io/instance: fastapi-release-prod
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: web-server
      app.kubernetes.io/part-of: fastapi-app
    name: web-server-service
    namespace: prod
    resourceVersion: "34294"
    uid: 77060ff9-4657-4890-8870-6c2489abe5ea
  spec:
    clusterIP: 10.100.141.94
    clusterIPs:
    - 10.100.141.94
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - port: 80
      protocol: TCP
      targetPort: 80
    selector:
      app.kubernetes.io/name: web-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2025-01-17T16:06:10Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: aws-vpc-cni
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-node
      app.kubernetes.io/version: v1.19.0
      helm.sh/chart: aws-vpc-cni-1.19.0
      k8s-app: aws-node
    name: aws-node
    namespace: kube-system
    resourceVersion: "36562"
    uid: 7dc73c45-15a7-4368-bb69-29dd29dba1a2
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: aws-node
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: aws-vpc-cni
          app.kubernetes.io/name: aws-node
          k8s-app: aws-node
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
                  - hybrid
                  - auto
        containers:
        - env:
          - name: ADDITIONAL_ENI_TAGS
            value: '{}'
          - name: ANNOTATE_POD_IP
            value: "false"
          - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
            value: "true"
          - name: AWS_VPC_ENI_MTU
            value: "9001"
          - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
            value: "false"
          - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
            value: "false"
          - name: AWS_VPC_K8S_CNI_LOGLEVEL
            value: DEBUG
          - name: AWS_VPC_K8S_CNI_LOG_FILE
            value: /host/var/log/aws-routed-eni/ipamd.log
          - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
            value: prng
          - name: AWS_VPC_K8S_CNI_VETHPREFIX
            value: eni
          - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
            value: /var/log/aws-routed-eni/plugin.log
          - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
            value: DEBUG
          - name: CLUSTER_ENDPOINT
            value: https://9B462804DC7B7311092EE08BB01C4870.gr7.ap-south-1.eks.amazonaws.com
          - name: CLUSTER_NAME
            value: basic-cluster-ap
          - name: DISABLE_INTROSPECTION
            value: "false"
          - name: DISABLE_METRICS
            value: "false"
          - name: DISABLE_NETWORK_RESOURCE_PROVISIONING
            value: "false"
          - name: ENABLE_IPv4
            value: "true"
          - name: ENABLE_IPv6
            value: "false"
          - name: ENABLE_POD_ENI
            value: "false"
          - name: ENABLE_PREFIX_DELEGATION
            value: "false"
          - name: ENABLE_SUBNET_DISCOVERY
            value: "true"
          - name: NETWORK_POLICY_ENFORCING_MODE
            value: standard
          - name: VPC_CNI_VERSION
            value: v1.19.0
          - name: VPC_ID
            value: vpc-078a1aa9f420a2ac9
          - name: WARM_ENI_TARGET
            value: "1"
          - name: WARM_PREFIX_TARGET
            value: "1"
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MY_POD_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni:v1.19.0-eksbuild.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: aws-node
          ports:
          - containerPort: 61678
            name: metrics
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /app/grpc-health-probe
              - -addr=:50051
              - -connect-timeout=5s
              - -rpc-timeout=5s
            failureThreshold: 3
            initialDelaySeconds: 1
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
              - NET_RAW
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /host/etc/cni/net.d
            name: cni-net-dir
          - mountPath: /host/var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
          - mountPath: /run/xtables.lock
            name: xtables-lock
        - args:
          - --enable-ipv6=false
          - --enable-network-policy=false
          - --enable-cloudwatch-logs=false
          - --enable-policy-event-logs=false
          - --log-file=/var/log/aws-routed-eni/network-policy-agent.log
          - --metrics-bind-addr=:8162
          - --health-probe-bind-addr=:8163
          - --conntrack-cache-cleanup-period=300
          env:
          - name: MY_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon/aws-network-policy-agent:v1.1.5-eksbuild.1
          imagePullPolicy: Always
          name: aws-eks-nodeagent
          resources:
            requests:
              cpu: 25m
          securityContext:
            capabilities:
              add:
              - NET_ADMIN
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
          - mountPath: /sys/fs/bpf
            name: bpf-pin-path
          - mountPath: /var/log/aws-routed-eni
            name: log-dir
          - mountPath: /var/run/aws-node
            name: run-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        initContainers:
        - env:
          - name: DISABLE_TCP_EARLY_DEMUX
            value: "false"
          - name: ENABLE_IPv6
            value: "false"
          image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/amazon-k8s-cni-init:v1.19.0-eksbuild.1
          imagePullPolicy: Always
          name: aws-vpc-cni-init
          resources:
            requests:
              cpu: 25m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /host/opt/cni/bin
            name: cni-bin-dir
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: aws-node
        serviceAccountName: aws-node
        terminationGracePeriodSeconds: 10
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /sys/fs/bpf
            type: ""
          name: bpf-pin-path
        - hostPath:
            path: /opt/cni/bin
            type: ""
          name: cni-bin-dir
        - hostPath:
            path: /etc/cni/net.d
            type: ""
          name: cni-net-dir
        - hostPath:
            path: /var/log/aws-routed-eni
            type: DirectoryOrCreate
          name: log-dir
        - hostPath:
            path: /var/run/aws-node
            type: DirectoryOrCreate
          name: run-dir
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 6
    desiredNumberScheduled: 6
    numberAvailable: 6
    numberMisscheduled: 0
    numberReady: 6
    observedGeneration: 1
    updatedNumberScheduled: 6
- apiVersion: apps/v1
  kind: DaemonSet
  metadata:
    annotations:
      deprecated.daemonset.template.generation: "1"
    creationTimestamp: "2025-01-17T16:06:11Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: kube-proxy
      k8s-app: kube-proxy
    name: kube-proxy
    namespace: kube-system
    resourceVersion: "36457"
    uid: 8df337e2-3421-47df-8e19-b0226771b1d3
  spec:
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: kube-proxy
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: kube-proxy
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
                - key: eks.amazonaws.com/compute-type
                  operator: NotIn
                  values:
                  - fargate
                  - auto
        containers:
        - command:
          - kube-proxy
          - --v=2
          - --config=/var/lib/kube-proxy-config/config
          - --hostname-override=$(NODE_NAME)
          env:
          - name: NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/kube-proxy:v1.30.6-minimal-eksbuild.3
          imagePullPolicy: IfNotPresent
          name: kube-proxy
          resources:
            requests:
              cpu: 100m
          securityContext:
            privileged: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/log
            name: varlog
          - mountPath: /run/xtables.lock
            name: xtables-lock
          - mountPath: /lib/modules
            name: lib-modules
            readOnly: true
          - mountPath: /var/lib/kube-proxy/
            name: kubeconfig
          - mountPath: /var/lib/kube-proxy-config/
            name: config
        dnsPolicy: ClusterFirst
        hostNetwork: true
        priorityClassName: system-node-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kube-proxy
        serviceAccountName: kube-proxy
        terminationGracePeriodSeconds: 30
        tolerations:
        - operator: Exists
        volumes:
        - hostPath:
            path: /var/log
            type: ""
          name: varlog
        - hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
          name: xtables-lock
        - hostPath:
            path: /lib/modules
            type: ""
          name: lib-modules
        - configMap:
            defaultMode: 420
            name: kube-proxy
          name: kubeconfig
        - configMap:
            defaultMode: 420
            name: kube-proxy-config
          name: config
    updateStrategy:
      rollingUpdate:
        maxSurge: 0
        maxUnavailable: 10%
      type: RollingUpdate
  status:
    currentNumberScheduled: 6
    desiredNumberScheduled: 6
    numberAvailable: 6
    numberMisscheduled: 0
    numberReady: 6
    observedGeneration: 1
    updatedNumberScheduled: 6
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: aws-load-balancer-controller
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-01-17T17:28:38Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: aws-load-balancer-controller
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: aws-load-balancer-controller
      app.kubernetes.io/version: v2.11.0
      helm.sh/chart: aws-load-balancer-controller-1.11.0
    name: aws-load-balancer-controller
    namespace: kube-system
    resourceVersion: "19230"
    uid: ac60fdab-fea5-448f-973f-27e81968a2a6
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: aws-load-balancer-controller
        app.kubernetes.io/name: aws-load-balancer-controller
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: aws-load-balancer-controller
          app.kubernetes.io/name: aws-load-balancer-controller
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - aws-load-balancer-controller
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - --cluster-name=basic-cluster-ap
          - --ingress-class=alb
          image: public.ecr.aws/eks/aws-load-balancer-controller:v2.11.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: 61779
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: aws-load-balancer-controller
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          - containerPort: 8080
            name: metrics-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /readyz
              port: 61779
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
        serviceAccount: aws-load-balancer-controller
        serviceAccountName: aws-load-balancer-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: aws-load-balancer-tls
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-01-17T17:28:49Z"
      lastUpdateTime: "2025-01-17T17:28:49Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T17:28:38Z"
      lastUpdateTime: "2025-01-17T17:28:49Z"
      message: ReplicaSet "aws-load-balancer-controller-7fc55d9569" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"app":"cluster-autoscaler"},"name":"cluster-autoscaler","namespace":"kube-system"},"spec":{"replicas":1,"selector":{"matchLabels":{"app":"cluster-autoscaler"}},"template":{"metadata":{"annotations":{"prometheus.io/port":"8085","prometheus.io/scrape":"true"},"labels":{"app":"cluster-autoscaler"}},"spec":{"containers":[{"command":["./cluster-autoscaler","--v=4","--stderrthreshold=info","--cloud-provider=aws","--skip-nodes-with-local-storage=false","--expander=least-waste","--node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/basic-cluster-ap"],"env":[{"name":"AWS_REGION","value":"ap-south-1"}],"image":"registry.k8s.io/autoscaling/cluster-autoscaler:v1.26.2","imagePullPolicy":"Always","name":"cluster-autoscaler","resources":{"limits":{"cpu":"100m","memory":"600Mi"},"requests":{"cpu":"100m","memory":"600Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true},"volumeMounts":[{"mountPath":"/etc/ssl/certs/ca-certificates.crt","name":"ssl-certs","readOnly":true}]}],"priorityClassName":"system-cluster-critical","securityContext":{"fsGroup":65534,"runAsNonRoot":true,"runAsUser":65534,"seccompProfile":{"type":"RuntimeDefault"}},"serviceAccountName":"cluster-autoscaler","volumes":[{"hostPath":{"path":"/etc/ssl/certs/ca-bundle.crt"},"name":"ssl-certs"}]}}}}
    creationTimestamp: "2025-01-17T16:22:36Z"
    generation: 1
    labels:
      app: cluster-autoscaler
    name: cluster-autoscaler
    namespace: kube-system
    resourceVersion: "16091"
    uid: 900eb80d-69c0-4f83-b8be-87c0542949b5
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app: cluster-autoscaler
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          prometheus.io/port: "8085"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cluster-autoscaler
      spec:
        containers:
        - command:
          - ./cluster-autoscaler
          - --v=4
          - --stderrthreshold=info
          - --cloud-provider=aws
          - --skip-nodes-with-local-storage=false
          - --expander=least-waste
          - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/basic-cluster-ap
          env:
          - name: AWS_REGION
            value: ap-south-1
          image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.26.2
          imagePullPolicy: Always
          name: cluster-autoscaler
          resources:
            limits:
              cpu: 100m
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 600Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/certs/ca-certificates.crt
            name: ssl-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cluster-autoscaler
        serviceAccountName: cluster-autoscaler
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /etc/ssl/certs/ca-bundle.crt
            type: ""
          name: ssl-certs
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T17:17:51Z"
      lastUpdateTime: "2025-01-17T17:17:51Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T17:17:47Z"
      lastUpdateTime: "2025-01-17T17:17:51Z"
      message: ReplicaSet "cluster-autoscaler-7fbdc669b9" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-01-17T16:06:11Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      kubernetes.io/name: CoreDNS
    name: coredns
    namespace: kube-system
    resourceVersion: "1504"
    uid: 73f471cf-d1f7-4ef2-943f-d23abddfd62e
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        eks.amazonaws.com/component: coredns
        k8s-app: kube-dns
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          eks.amazonaws.com/component: coredns
          k8s-app: kube-dns
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns:v1.11.1-eksbuild.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - key: CriticalAddonsOnly
          operator: Exists
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              k8s-app: kube-dns
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-01-17T16:09:20Z"
      lastUpdateTime: "2025-01-17T16:09:20Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T16:06:11Z"
      lastUpdateTime: "2025-01-17T16:09:20Z"
      message: ReplicaSet "coredns-6c55b85fbb" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "2"
      kubectl.kubernetes.io/last-applied-configuration: |
        {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"labels":{"k8s-app":"metrics-server"},"name":"metrics-server","namespace":"kube-system"},"spec":{"selector":{"matchLabels":{"k8s-app":"metrics-server"}},"strategy":{"rollingUpdate":{"maxUnavailable":0}},"template":{"metadata":{"labels":{"k8s-app":"metrics-server"}},"spec":{"containers":[{"args":["--cert-dir=/tmp","--secure-port=10250","--kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname","--kubelet-use-node-status-port","--metric-resolution=15s"],"image":"registry.k8s.io/metrics-server/metrics-server:v0.7.2","imagePullPolicy":"IfNotPresent","livenessProbe":{"failureThreshold":3,"httpGet":{"path":"/livez","port":"https","scheme":"HTTPS"},"periodSeconds":10},"name":"metrics-server","ports":[{"containerPort":10250,"name":"https","protocol":"TCP"}],"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/readyz","port":"https","scheme":"HTTPS"},"initialDelaySeconds":20,"periodSeconds":10},"resources":{"requests":{"cpu":"100m","memory":"200Mi"}},"securityContext":{"allowPrivilegeEscalation":false,"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":1000,"seccompProfile":{"type":"RuntimeDefault"}},"volumeMounts":[{"mountPath":"/tmp","name":"tmp-dir"}]}],"nodeSelector":{"kubernetes.io/os":"linux"},"priorityClassName":"system-cluster-critical","serviceAccountName":"metrics-server","volumes":[{"emptyDir":{},"name":"tmp-dir"}]}}}}
    creationTimestamp: "2025-01-17T16:17:49Z"
    generation: 2
    labels:
      k8s-app: metrics-server
    name: metrics-server
    namespace: kube-system
    resourceVersion: "3267"
    uid: 9bed7641-cfbe-4a29-9ffe-4b7f2735da66
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        k8s-app: metrics-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --kubelet-insecure-tls
          image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 4443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T16:18:19Z"
      lastUpdateTime: "2025-01-17T16:18:19Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T16:17:49Z"
      lastUpdateTime: "2025-01-17T16:18:36Z"
      message: ReplicaSet "metrics-server-fd7d8565c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-api
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.10.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
    name: kubernetes-dashboard-api
    namespace: kubernetes-dashboard
    resourceVersion: "3835"
    uid: b9a65cd8-7fb1-4569-93f4-0abcc3e05a6a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kubernetes-dashboard-api
        app.kubernetes.io/part-of: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: 4120fc2e9bcc3a7388ff0cb301cdf95879006bb0a8b7c4937639330b49b9f16b
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: api
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubernetes-dashboard-api
          app.kubernetes.io/part-of: kubernetes-dashboard
          app.kubernetes.io/version: 1.10.2
          helm.sh/chart: kubernetes-dashboard-7.10.1
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --namespace=kubernetes-dashboard
          - --metrics-scraper-service-name=kubernetes-dashboard-metrics-scraper
          env:
          - name: CSRF_KEY
            valueFrom:
              secretKeyRef:
                key: private.key
                name: kubernetes-dashboard-csrf
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: docker.io/kubernetesui/dashboard-api:1.10.2
          imagePullPolicy: IfNotPresent
          name: kubernetes-dashboard-api
          ports:
          - containerPort: 8000
            name: api
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard-api
        serviceAccountName: kubernetes-dashboard-api
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T16:20:44Z"
      lastUpdateTime: "2025-01-17T16:20:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T16:20:37Z"
      lastUpdateTime: "2025-01-17T16:20:44Z"
      message: ReplicaSet "kubernetes-dashboard-api-788d598bb4" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: auth
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-auth
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.10.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
    name: kubernetes-dashboard-auth
    namespace: kubernetes-dashboard
    resourceVersion: "3826"
    uid: 80bd4570-16cc-4a59-9fcc-b529055a222f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kubernetes-dashboard-auth
        app.kubernetes.io/part-of: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          checksum/config: b02c5dabe20ad1806f40c78c0168648afb96cfd04d599ebfe5661c6409a424f1
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: auth
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubernetes-dashboard-auth
          app.kubernetes.io/part-of: kubernetes-dashboard
          app.kubernetes.io/version: 1.2.3
          helm.sh/chart: kubernetes-dashboard-7.10.1
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: CSRF_KEY
            valueFrom:
              secretKeyRef:
                key: private.key
                name: kubernetes-dashboard-csrf
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: docker.io/kubernetesui/dashboard-auth:1.2.3
          imagePullPolicy: IfNotPresent
          name: kubernetes-dashboard-auth
          ports:
          - containerPort: 8000
            name: auth
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T16:20:44Z"
      lastUpdateTime: "2025-01-17T16:20:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T16:20:37Z"
      lastUpdateTime: "2025-01-17T16:20:44Z"
      message: ReplicaSet "kubernetes-dashboard-auth-7899756b44" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.8"
      helm.sh/chart: kong-2.46.0
    name: kubernetes-dashboard-kong
    namespace: kubernetes-dashboard
    resourceVersion: "3906"
    uid: 312a41e0-691b-444f-889f-ea64847a9f63
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/component: app
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kong
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kuma.io/gateway: enabled
          kuma.io/service-account-token-volume: kubernetes-dashboard-kong-token
          traffic.sidecar.istio.io/includeInboundPorts: ""
        creationTimestamp: null
        labels:
          app: kubernetes-dashboard-kong
          app.kubernetes.io/component: app
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kong
          app.kubernetes.io/version: "3.8"
          helm.sh/chart: kong-2.46.0
          version: "3.8"
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_DECLARATIVE_CONFIG
            value: /kong_dbless/kong.yml
          - name: KONG_DNS_ORDER
            value: LAST,A,CNAME,AAAA,SRV
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "1"
          - name: KONG_PLUGINS
            value: "off"
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          - name: KONG_NGINX_DAEMON
            value: "off"
          image: kong:3.8
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - kong
                - quit
                - --wait=15
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: proxy
          ports:
          - containerPort: 8443
            name: proxy-tls
            protocol: TCP
          - containerPort: 8100
            name: status
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status/ready
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kubernetes-dashboard-kong-prefix-dir
          - mountPath: /tmp
            name: kubernetes-dashboard-kong-tmp
          - mountPath: /kong_dbless/
            name: kong-custom-dbless-config-volume
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - rm
          - -vrf
          - $KONG_PREFIX/pids
          env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_DECLARATIVE_CONFIG
            value: /kong_dbless/kong.yml
          - name: KONG_DNS_ORDER
            value: LAST,A,CNAME,AAAA,SRV
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "1"
          - name: KONG_PLUGINS
            value: "off"
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          image: kong:3.8
          imagePullPolicy: IfNotPresent
          name: clear-stale-pid
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kubernetes-dashboard-kong-prefix-dir
          - mountPath: /tmp
            name: kubernetes-dashboard-kong-tmp
          - mountPath: /kong_dbless/
            name: kong-custom-dbless-config-volume
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard-kong
        serviceAccountName: kubernetes-dashboard-kong
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            sizeLimit: 256Mi
          name: kubernetes-dashboard-kong-prefix-dir
        - emptyDir:
            sizeLimit: 1Gi
          name: kubernetes-dashboard-kong-tmp
        - name: kubernetes-dashboard-kong-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        - configMap:
            defaultMode: 420
            name: kong-dbless-config
          name: kong-custom-dbless-config-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T16:20:58Z"
      lastUpdateTime: "2025-01-17T16:20:58Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T16:20:37Z"
      lastUpdateTime: "2025-01-17T16:20:58Z"
      message: ReplicaSet "kubernetes-dashboard-kong-78fd98d579" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: metrics-scraper
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.2.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
    name: kubernetes-dashboard-metrics-scraper
    namespace: kubernetes-dashboard
    resourceVersion: "3830"
    uid: f42a7a68-5ac9-4eab-a054-4ac445ade241
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
        app.kubernetes.io/part-of: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: metrics-scraper
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
          app.kubernetes.io/part-of: kubernetes-dashboard
          app.kubernetes.io/version: 1.2.2
          helm.sh/chart: kubernetes-dashboard-7.10.1
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: docker.io/kubernetesui/dashboard-metrics-scraper:1.2.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard-metrics-scraper
        serviceAccountName: kubernetes-dashboard-metrics-scraper
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T16:20:44Z"
      lastUpdateTime: "2025-01-17T16:20:44Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T16:20:37Z"
      lastUpdateTime: "2025-01-17T16:20:44Z"
      message: ReplicaSet "kubernetes-dashboard-metrics-scraper-6c8d6bb74d" has successfully
        progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: web
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-web
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.6.1
      helm.sh/chart: kubernetes-dashboard-7.10.1
    name: kubernetes-dashboard-web
    namespace: kubernetes-dashboard
    resourceVersion: "3847"
    uid: 92cf6ee4-7b38-41a2-8798-aac8e614ff92
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kubernetes-dashboard-web
        app.kubernetes.io/part-of: kubernetes-dashboard
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: web
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubernetes-dashboard-web
          app.kubernetes.io/part-of: kubernetes-dashboard
          app.kubernetes.io/version: 1.6.1
          helm.sh/chart: kubernetes-dashboard-7.10.1
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --namespace=kubernetes-dashboard
          - --settings-config-map-name=kubernetes-dashboard-web-settings
          env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: docker.io/kubernetesui/dashboard-web:1.6.1
          imagePullPolicy: IfNotPresent
          name: kubernetes-dashboard-web
          ports:
          - containerPort: 8000
            name: web
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard-web
        serviceAccountName: kubernetes-dashboard-web
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T16:20:45Z"
      lastUpdateTime: "2025-01-17T16:20:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T16:20:37Z"
      lastUpdateTime: "2025-01-17T16:20:45Z"
      message: ReplicaSet "kubernetes-dashboard-web-86495b6c8f" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    generation: 6
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: model-server
      app.kubernetes.io/part-of: fastapi-app
    name: model-server
    namespace: prod
    resourceVersion: "38256"
    uid: 6775695e-aa19-46aa-af63-aae4c56564e0
  spec:
    progressDeadlineSeconds: 600
    replicas: 3
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: model-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: model-server
      spec:
        containers:
        - env:
          - name: REDIS_HOST
            valueFrom:
              configMapKeyRef:
                key: hostname
                name: redis-config-v1
          - name: REDIS_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: redis-config-v1
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_password
                name: redis-secret-v1
          - name: MODEL_NAME
            valueFrom:
              configMapKeyRef:
                key: model_name
                name: model-server-config-v1
          image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server:latest
          imagePullPolicy: IfNotPresent
          name: model-server
          ports:
          - containerPort: 80
            protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 800Mi
            requests:
              cpu: 600m
              memory: 600Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          role: spot
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    conditions:
    - lastTransitionTime: "2025-01-17T18:25:32Z"
      lastUpdateTime: "2025-01-17T18:25:34Z"
      message: ReplicaSet "model-server-7bb6747795" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    - lastTransitionTime: "2025-01-17T18:33:14Z"
      lastUpdateTime: "2025-01-17T18:33:14Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    observedGeneration: 6
    readyReplicas: 3
    replicas: 3
    updatedReplicas: 3
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: redis
      app.kubernetes.io/part-of: fastapi-app
    name: redis
    namespace: prod
    resourceVersion: "34406"
    uid: 32e9cba5-20f0-4cc4-8779-18ccb521f46d
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: redis
        role: master
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: redis
          role: master
      spec:
        containers:
        - args:
          - --requirepass
          - $(REDIS_PASSWORD)
          command:
          - redis-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_password
                name: redis-secret-v1
          image: redis:7.4.1
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: redis-storage
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T18:25:33Z"
      lastUpdateTime: "2025-01-17T18:25:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T18:25:32Z"
      lastUpdateTime: "2025-01-17T18:25:33Z"
      message: ReplicaSet "redis-5b8fb894df" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: ui-server
      app.kubernetes.io/part-of: fastapi-app
    name: ui-server
    namespace: prod
    resourceVersion: "34401"
    uid: 6bcf22cb-40cc-4a48-ab1e-af26cbf2a02a
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: ui-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: ui-server
      spec:
        containers:
        - env:
          - name: WEB_SERVER_URL
            valueFrom:
              configMapKeyRef:
                key: web_server_url
                name: web-server-config-v1
          image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/ui-server:latest
          imagePullPolicy: IfNotPresent
          name: ui-server
          ports:
          - containerPort: 80
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 1536Mi
            requests:
              cpu: 250m
              memory: 768Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-01-17T18:25:33Z"
      lastUpdateTime: "2025-01-17T18:25:33Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T18:25:32Z"
      lastUpdateTime: "2025-01-17T18:25:33Z"
      message: ReplicaSet "ui-server-6f5d6cc767" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    generation: 1
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: web-server
      app.kubernetes.io/part-of: fastapi-app
    name: web-server
    namespace: prod
    resourceVersion: "34429"
    uid: d3fa0d44-a441-49af-9fae-368397ab40f7
  spec:
    progressDeadlineSeconds: 600
    replicas: 2
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/name: web-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: web-server
      spec:
        containers:
        - env:
          - name: REDIS_HOST
            valueFrom:
              configMapKeyRef:
                key: hostname
                name: redis-config-v1
          - name: REDIS_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: redis-config-v1
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_password
                name: redis-secret-v1
          - name: MODEL_SERVER_URL
            valueFrom:
              configMapKeyRef:
                key: model_server_url
                name: model-server-config-v1
          image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/web-server:latest
          imagePullPolicy: IfNotPresent
          name: web-server
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    conditions:
    - lastTransitionTime: "2025-01-17T18:25:35Z"
      lastUpdateTime: "2025-01-17T18:25:35Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-01-17T18:25:32Z"
      lastUpdateTime: "2025-01-17T18:25:35Z"
      message: ReplicaSet "web-server-57f65b996d" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
    updatedReplicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: aws-load-balancer-controller
      meta.helm.sh/release-namespace: kube-system
    creationTimestamp: "2025-01-17T17:28:38Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: aws-load-balancer-controller
      app.kubernetes.io/name: aws-load-balancer-controller
      pod-template-hash: 7fc55d9569
    name: aws-load-balancer-controller-7fc55d9569
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: aws-load-balancer-controller
      uid: ac60fdab-fea5-448f-973f-27e81968a2a6
    resourceVersion: "19229"
    uid: ec0cc64e-dfcf-4302-a63e-4a8cde32484f
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/instance: aws-load-balancer-controller
        app.kubernetes.io/name: aws-load-balancer-controller
        pod-template-hash: 7fc55d9569
    template:
      metadata:
        annotations:
          prometheus.io/port: "8080"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: aws-load-balancer-controller
          app.kubernetes.io/name: aws-load-balancer-controller
          pod-template-hash: 7fc55d9569
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                    - aws-load-balancer-controller
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - --cluster-name=basic-cluster-ap
          - --ingress-class=alb
          image: public.ecr.aws/eks/aws-load-balancer-controller:v2.11.0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 2
            httpGet:
              path: /healthz
              port: 61779
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: aws-load-balancer-controller
          ports:
          - containerPort: 9443
            name: webhook-server
            protocol: TCP
          - containerPort: 8080
            name: metrics-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /readyz
              port: 61779
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp/k8s-webhook-server/serving-certs
            name: cert
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
        serviceAccount: aws-load-balancer-controller
        serviceAccountName: aws-load-balancer-controller
        terminationGracePeriodSeconds: 10
        volumes:
        - name: cert
          secret:
            defaultMode: 420
            secretName: aws-load-balancer-tls
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-01-17T16:22:36Z"
    generation: 1
    labels:
      app: cluster-autoscaler
      pod-template-hash: 7fbdc669b9
    name: cluster-autoscaler-7fbdc669b9
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: cluster-autoscaler
      uid: 900eb80d-69c0-4f83-b8be-87c0542949b5
    resourceVersion: "16090"
    uid: 67664fc5-7c54-42d3-a539-247f1db67989
  spec:
    replicas: 1
    selector:
      matchLabels:
        app: cluster-autoscaler
        pod-template-hash: 7fbdc669b9
    template:
      metadata:
        annotations:
          prometheus.io/port: "8085"
          prometheus.io/scrape: "true"
        creationTimestamp: null
        labels:
          app: cluster-autoscaler
          pod-template-hash: 7fbdc669b9
      spec:
        containers:
        - command:
          - ./cluster-autoscaler
          - --v=4
          - --stderrthreshold=info
          - --cloud-provider=aws
          - --skip-nodes-with-local-storage=false
          - --expander=least-waste
          - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/basic-cluster-ap
          env:
          - name: AWS_REGION
            value: ap-south-1
          image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.26.2
          imagePullPolicy: Always
          name: cluster-autoscaler
          resources:
            limits:
              cpu: 100m
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 600Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/ssl/certs/ca-certificates.crt
            name: ssl-certs
            readOnly: true
        dnsPolicy: ClusterFirst
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroup: 65534
          runAsNonRoot: true
          runAsUser: 65534
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: cluster-autoscaler
        serviceAccountName: cluster-autoscaler
        terminationGracePeriodSeconds: 30
        volumes:
        - hostPath:
            path: /etc/ssl/certs/ca-bundle.crt
            type: ""
          name: ssl-certs
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-01-17T16:06:11Z"
    generation: 1
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 6c55b85fbb
    name: coredns-6c55b85fbb
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: coredns
      uid: 73f471cf-d1f7-4ef2-943f-d23abddfd62e
    resourceVersion: "1503"
    uid: ec7f6ab9-6ae8-40f0-accb-9084295e6fee
  spec:
    replicas: 2
    selector:
      matchLabels:
        eks.amazonaws.com/component: coredns
        k8s-app: kube-dns
        pod-template-hash: 6c55b85fbb
    template:
      metadata:
        creationTimestamp: null
        labels:
          eks.amazonaws.com/component: coredns
          k8s-app: kube-dns
          pod-template-hash: 6c55b85fbb
      spec:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
                - key: kubernetes.io/arch
                  operator: In
                  values:
                  - amd64
                  - arm64
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                  - key: k8s-app
                    operator: In
                    values:
                    - kube-dns
                topologyKey: kubernetes.io/hostname
              weight: 100
        containers:
        - args:
          - -conf
          - /etc/coredns/Corefile
          image: 602401143452.dkr.ecr.ap-south-1.amazonaws.com/eks/coredns:v1.11.1-eksbuild.8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: coredns
          ports:
          - containerPort: 53
            name: dns
            protocol: UDP
          - containerPort: 53
            name: dns-tcp
            protocol: TCP
          - containerPort: 9153
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ready
              port: 8181
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 170Mi
            requests:
              cpu: 100m
              memory: 70Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
              - NET_BIND_SERVICE
              drop:
              - ALL
            readOnlyRootFilesystem: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/coredns
            name: config-volume
            readOnly: true
        dnsPolicy: Default
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: coredns
        serviceAccountName: coredns
        terminationGracePeriodSeconds: 30
        tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
        - key: CriticalAddonsOnly
          operator: Exists
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              k8s-app: kube-dns
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - configMap:
            defaultMode: 420
            items:
            - key: Corefile
              path: Corefile
            name: coredns
          name: config-volume
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-01-17T16:17:49Z"
    generation: 2
    labels:
      k8s-app: metrics-server
      pod-template-hash: d5865ff47
    name: metrics-server-d5865ff47
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: 9bed7641-cfbe-4a29-9ffe-4b7f2735da66
    resourceVersion: "3266"
    uid: 2fb42eec-f7c1-4fd0-a63a-c834dbc5e896
  spec:
    replicas: 0
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: d5865ff47
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: d5865ff47
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=10250
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 10250
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
    creationTimestamp: "2025-01-17T16:18:15Z"
    generation: 1
    labels:
      k8s-app: metrics-server
      pod-template-hash: fd7d8565c
    name: metrics-server-fd7d8565c
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: metrics-server
      uid: 9bed7641-cfbe-4a29-9ffe-4b7f2735da66
    resourceVersion: "3256"
    uid: 3d59120d-4096-47ff-bb68-0e44a4942fc5
  spec:
    replicas: 1
    selector:
      matchLabels:
        k8s-app: metrics-server
        pod-template-hash: fd7d8565c
    template:
      metadata:
        creationTimestamp: null
        labels:
          k8s-app: metrics-server
          pod-template-hash: fd7d8565c
      spec:
        containers:
        - args:
          - --cert-dir=/tmp
          - --secure-port=4443
          - --kubelet-preferred-address-types=InternalIP,ExternalIP,Hostname
          - --kubelet-use-node-status-port
          - --metric-resolution=15s
          - --kubelet-insecure-tls
          image: registry.k8s.io/metrics-server/metrics-server:v0.7.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /livez
              port: https
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: metrics-server
          ports:
          - containerPort: 4443
            name: https
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: https
              scheme: HTTPS
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-dir
        dnsPolicy: ClusterFirst
        hostNetwork: true
        nodeSelector:
          kubernetes.io/os: linux
        priorityClassName: system-cluster-critical
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: metrics-server
        serviceAccountName: metrics-server
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-dir
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: api
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-api
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.10.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
      pod-template-hash: 788d598bb4
    name: kubernetes-dashboard-api-788d598bb4
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard-api
      uid: b9a65cd8-7fb1-4569-93f4-0abcc3e05a6a
    resourceVersion: "3833"
    uid: 5f389bb2-fac3-46bb-8a63-cf394c3122fb
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kubernetes-dashboard-api
        app.kubernetes.io/part-of: kubernetes-dashboard
        pod-template-hash: 788d598bb4
    template:
      metadata:
        annotations:
          checksum/config: 4120fc2e9bcc3a7388ff0cb301cdf95879006bb0a8b7c4937639330b49b9f16b
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: api
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubernetes-dashboard-api
          app.kubernetes.io/part-of: kubernetes-dashboard
          app.kubernetes.io/version: 1.10.2
          helm.sh/chart: kubernetes-dashboard-7.10.1
          pod-template-hash: 788d598bb4
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --namespace=kubernetes-dashboard
          - --metrics-scraper-service-name=kubernetes-dashboard-metrics-scraper
          env:
          - name: CSRF_KEY
            valueFrom:
              secretKeyRef:
                key: private.key
                name: kubernetes-dashboard-csrf
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: docker.io/kubernetesui/dashboard-api:1.10.2
          imagePullPolicy: IfNotPresent
          name: kubernetes-dashboard-api
          ports:
          - containerPort: 8000
            name: api
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard-api
        serviceAccountName: kubernetes-dashboard-api
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: auth
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-auth
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.2.3
      helm.sh/chart: kubernetes-dashboard-7.10.1
      pod-template-hash: 7899756b44
    name: kubernetes-dashboard-auth-7899756b44
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard-auth
      uid: 80bd4570-16cc-4a59-9fcc-b529055a222f
    resourceVersion: "3824"
    uid: 30a37fcc-3866-4c61-8efb-caf1d6ff7989
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kubernetes-dashboard-auth
        app.kubernetes.io/part-of: kubernetes-dashboard
        pod-template-hash: 7899756b44
    template:
      metadata:
        annotations:
          checksum/config: b02c5dabe20ad1806f40c78c0168648afb96cfd04d599ebfe5661c6409a424f1
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: auth
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubernetes-dashboard-auth
          app.kubernetes.io/part-of: kubernetes-dashboard
          app.kubernetes.io/version: 1.2.3
          helm.sh/chart: kubernetes-dashboard-7.10.1
          pod-template-hash: 7899756b44
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: CSRF_KEY
            valueFrom:
              secretKeyRef:
                key: private.key
                name: kubernetes-dashboard-csrf
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: docker.io/kubernetesui/dashboard-auth:1.2.3
          imagePullPolicy: IfNotPresent
          name: kubernetes-dashboard-auth
          ports:
          - containerPort: 8000
            name: auth
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app: kubernetes-dashboard-kong
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kong
      app.kubernetes.io/version: "3.8"
      helm.sh/chart: kong-2.46.0
      pod-template-hash: 78fd98d579
      version: "3.8"
    name: kubernetes-dashboard-kong-78fd98d579
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard-kong
      uid: 312a41e0-691b-444f-889f-ea64847a9f63
    resourceVersion: "3905"
    uid: 3cc80328-b269-4f13-a034-902861ff4c78
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/component: app
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kong
        pod-template-hash: 78fd98d579
    template:
      metadata:
        annotations:
          kuma.io/gateway: enabled
          kuma.io/service-account-token-volume: kubernetes-dashboard-kong-token
          traffic.sidecar.istio.io/includeInboundPorts: ""
        creationTimestamp: null
        labels:
          app: kubernetes-dashboard-kong
          app.kubernetes.io/component: app
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kong
          app.kubernetes.io/version: "3.8"
          helm.sh/chart: kong-2.46.0
          pod-template-hash: 78fd98d579
          version: "3.8"
      spec:
        automountServiceAccountToken: false
        containers:
        - env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_DECLARATIVE_CONFIG
            value: /kong_dbless/kong.yml
          - name: KONG_DNS_ORDER
            value: LAST,A,CNAME,AAAA,SRV
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "1"
          - name: KONG_PLUGINS
            value: "off"
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          - name: KONG_NGINX_DAEMON
            value: "off"
          image: kong:3.8
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                - kong
                - quit
                - --wait=15
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /status
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: proxy
          ports:
          - containerPort: 8443
            name: proxy-tls
            protocol: TCP
          - containerPort: 8100
            name: status
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /status/ready
              port: status
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kubernetes-dashboard-kong-prefix-dir
          - mountPath: /tmp
            name: kubernetes-dashboard-kong-tmp
          - mountPath: /kong_dbless/
            name: kong-custom-dbless-config-volume
        dnsPolicy: ClusterFirst
        initContainers:
        - command:
          - rm
          - -vrf
          - $KONG_PREFIX/pids
          env:
          - name: KONG_ADMIN_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_GUI_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_ADMIN_GUI_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ADMIN_LISTEN
            value: 127.0.0.1:8444 http2 ssl, [::1]:8444 http2 ssl
          - name: KONG_CLUSTER_LISTEN
            value: "off"
          - name: KONG_DATABASE
            value: "off"
          - name: KONG_DECLARATIVE_CONFIG
            value: /kong_dbless/kong.yml
          - name: KONG_DNS_ORDER
            value: LAST,A,CNAME,AAAA,SRV
          - name: KONG_LUA_PACKAGE_PATH
            value: /opt/?.lua;/opt/?/init.lua;;
          - name: KONG_NGINX_WORKER_PROCESSES
            value: "1"
          - name: KONG_PLUGINS
            value: "off"
          - name: KONG_PORTAL_API_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PORTAL_API_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PORT_MAPS
            value: 443:8443
          - name: KONG_PREFIX
            value: /kong_prefix/
          - name: KONG_PROXY_ACCESS_LOG
            value: /dev/stdout
          - name: KONG_PROXY_ERROR_LOG
            value: /dev/stderr
          - name: KONG_PROXY_LISTEN
            value: 0.0.0.0:8443 http2 ssl, [::]:8443 http2 ssl
          - name: KONG_PROXY_STREAM_ACCESS_LOG
            value: /dev/stdout basic
          - name: KONG_PROXY_STREAM_ERROR_LOG
            value: /dev/stderr
          - name: KONG_ROUTER_FLAVOR
            value: traditional
          - name: KONG_STATUS_ACCESS_LOG
            value: "off"
          - name: KONG_STATUS_ERROR_LOG
            value: /dev/stderr
          - name: KONG_STATUS_LISTEN
            value: 0.0.0.0:8100, [::]:8100
          - name: KONG_STREAM_LISTEN
            value: "off"
          image: kong:3.8
          imagePullPolicy: IfNotPresent
          name: clear-stale-pid
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /kong_prefix/
            name: kubernetes-dashboard-kong-prefix-dir
          - mountPath: /tmp
            name: kubernetes-dashboard-kong-tmp
          - mountPath: /kong_dbless/
            name: kong-custom-dbless-config-volume
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: kubernetes-dashboard-kong
        serviceAccountName: kubernetes-dashboard-kong
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir:
            sizeLimit: 256Mi
          name: kubernetes-dashboard-kong-prefix-dir
        - emptyDir:
            sizeLimit: 1Gi
          name: kubernetes-dashboard-kong-tmp
        - name: kubernetes-dashboard-kong-token
          projected:
            defaultMode: 420
            sources:
            - serviceAccountToken:
                expirationSeconds: 3607
                path: token
            - configMap:
                items:
                - key: ca.crt
                  path: ca.crt
                name: kube-root-ca.crt
            - downwardAPI:
                items:
                - fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
                  path: namespace
        - configMap:
            defaultMode: 420
            name: kong-dbless-config
          name: kong-custom-dbless-config-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: metrics-scraper
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.2.2
      helm.sh/chart: kubernetes-dashboard-7.10.1
      pod-template-hash: 6c8d6bb74d
    name: kubernetes-dashboard-metrics-scraper-6c8d6bb74d
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard-metrics-scraper
      uid: f42a7a68-5ac9-4eab-a054-4ac445ade241
    resourceVersion: "3829"
    uid: a3de5482-2d8f-4dee-a1b0-d4efc8f111c8
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
        app.kubernetes.io/part-of: kubernetes-dashboard
        pod-template-hash: 6c8d6bb74d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: metrics-scraper
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubernetes-dashboard-metrics-scraper
          app.kubernetes.io/part-of: kubernetes-dashboard
          app.kubernetes.io/version: 1.2.2
          helm.sh/chart: kubernetes-dashboard-7.10.1
          pod-template-hash: 6c8d6bb74d
      spec:
        automountServiceAccountToken: true
        containers:
        - env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: docker.io/kubernetesui/dashboard-metrics-scraper:1.2.2
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /
              port: 8000
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 30
          name: kubernetes-dashboard-metrics-scraper
          ports:
          - containerPort: 8000
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard-metrics-scraper
        serviceAccountName: kubernetes-dashboard-metrics-scraper
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: kubernetes-dashboard
      meta.helm.sh/release-namespace: kubernetes-dashboard
    creationTimestamp: "2025-01-17T16:20:37Z"
    generation: 1
    labels:
      app.kubernetes.io/component: web
      app.kubernetes.io/instance: kubernetes-dashboard
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: kubernetes-dashboard-web
      app.kubernetes.io/part-of: kubernetes-dashboard
      app.kubernetes.io/version: 1.6.1
      helm.sh/chart: kubernetes-dashboard-7.10.1
      pod-template-hash: 86495b6c8f
    name: kubernetes-dashboard-web-86495b6c8f
    namespace: kubernetes-dashboard
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: kubernetes-dashboard-web
      uid: 92cf6ee4-7b38-41a2-8798-aac8e614ff92
    resourceVersion: "3846"
    uid: e7017b54-caac-47fd-bf59-05a0bb6ed48c
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: kubernetes-dashboard
        app.kubernetes.io/name: kubernetes-dashboard-web
        app.kubernetes.io/part-of: kubernetes-dashboard
        pod-template-hash: 86495b6c8f
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/component: web
          app.kubernetes.io/instance: kubernetes-dashboard
          app.kubernetes.io/managed-by: Helm
          app.kubernetes.io/name: kubernetes-dashboard-web
          app.kubernetes.io/part-of: kubernetes-dashboard
          app.kubernetes.io/version: 1.6.1
          helm.sh/chart: kubernetes-dashboard-7.10.1
          pod-template-hash: 86495b6c8f
      spec:
        automountServiceAccountToken: true
        containers:
        - args:
          - --namespace=kubernetes-dashboard
          - --settings-config-map-name=kubernetes-dashboard-web-settings
          env:
          - name: GOMAXPROCS
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.cpu
          - name: GOMEMLIMIT
            valueFrom:
              resourceFieldRef:
                divisor: "1"
                resource: limits.memory
          image: docker.io/kubernetesui/dashboard-web:1.6.1
          imagePullPolicy: IfNotPresent
          name: kubernetes-dashboard-web
          ports:
          - containerPort: 8000
            name: web
            protocol: TCP
          resources:
            limits:
              cpu: 250m
              memory: 400Mi
            requests:
              cpu: 100m
              memory: 200Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 2001
            runAsUser: 1001
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          runAsNonRoot: true
          seccompProfile:
            type: RuntimeDefault
        serviceAccount: kubernetes-dashboard-web
        serviceAccountName: kubernetes-dashboard-web
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: tmp-volume
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "3"
      deployment.kubernetes.io/max-replicas: "4"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    generation: 6
    labels:
      app.kubernetes.io/name: model-server
      pod-template-hash: 7bb6747795
    name: model-server-7bb6747795
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: model-server
      uid: 6775695e-aa19-46aa-af63-aae4c56564e0
    resourceVersion: "38254"
    uid: 8ee729ce-829c-40b0-bd0c-b2c1ed080c28
  spec:
    replicas: 3
    selector:
      matchLabels:
        app.kubernetes.io/name: model-server
        pod-template-hash: 7bb6747795
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: model-server
          pod-template-hash: 7bb6747795
      spec:
        containers:
        - env:
          - name: REDIS_HOST
            valueFrom:
              configMapKeyRef:
                key: hostname
                name: redis-config-v1
          - name: REDIS_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: redis-config-v1
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_password
                name: redis-secret-v1
          - name: MODEL_NAME
            valueFrom:
              configMapKeyRef:
                key: model_name
                name: model-server-config-v1
          image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/model-server:latest
          imagePullPolicy: IfNotPresent
          name: model-server
          ports:
          - containerPort: 80
            protocol: TCP
          resources:
            limits:
              cpu: "1"
              memory: 800Mi
            requests:
              cpu: 600m
              memory: 600Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        nodeSelector:
          role: spot
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 3
    fullyLabeledReplicas: 3
    observedGeneration: 6
    readyReplicas: 3
    replicas: 3
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    generation: 1
    labels:
      app.kubernetes.io/name: redis
      pod-template-hash: 5b8fb894df
      role: master
    name: redis-5b8fb894df
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: redis
      uid: 32e9cba5-20f0-4cc4-8779-18ccb521f46d
    resourceVersion: "34405"
    uid: 47ffae0c-206a-4666-9fc7-59802a6169fc
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: redis
        pod-template-hash: 5b8fb894df
        role: master
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: redis
          pod-template-hash: 5b8fb894df
          role: master
      spec:
        containers:
        - args:
          - --requirepass
          - $(REDIS_PASSWORD)
          command:
          - redis-server
          env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_password
                name: redis-secret-v1
          image: redis:7.4.1
          imagePullPolicy: IfNotPresent
          name: redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /data
            name: redis-storage
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    generation: 1
    labels:
      app.kubernetes.io/name: ui-server
      pod-template-hash: 6f5d6cc767
    name: ui-server-6f5d6cc767
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: ui-server
      uid: 6bcf22cb-40cc-4a48-ab1e-af26cbf2a02a
    resourceVersion: "34398"
    uid: 4855a70f-38da-4c70-80b2-f0a6749822b4
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/name: ui-server
        pod-template-hash: 6f5d6cc767
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: ui-server
          pod-template-hash: 6f5d6cc767
      spec:
        containers:
        - env:
          - name: WEB_SERVER_URL
            valueFrom:
              configMapKeyRef:
                key: web_server_url
                name: web-server-config-v1
          image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/ui-server:latest
          imagePullPolicy: IfNotPresent
          name: ui-server
          ports:
          - containerPort: 80
            protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 1536Mi
            requests:
              cpu: 250m
              memory: 768Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "2"
      deployment.kubernetes.io/max-replicas: "3"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    generation: 1
    labels:
      app.kubernetes.io/name: web-server
      pod-template-hash: 57f65b996d
    name: web-server-57f65b996d
    namespace: prod
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: web-server
      uid: d3fa0d44-a441-49af-9fae-368397ab40f7
    resourceVersion: "34427"
    uid: 414055a5-7fea-4ca5-b913-a8d2e3724a5c
  spec:
    replicas: 2
    selector:
      matchLabels:
        app.kubernetes.io/name: web-server
        pod-template-hash: 57f65b996d
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/name: web-server
          pod-template-hash: 57f65b996d
      spec:
        containers:
        - env:
          - name: REDIS_HOST
            valueFrom:
              configMapKeyRef:
                key: hostname
                name: redis-config-v1
          - name: REDIS_PORT
            valueFrom:
              configMapKeyRef:
                key: port
                name: redis-config-v1
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: db_password
                name: redis-secret-v1
          - name: MODEL_SERVER_URL
            valueFrom:
              configMapKeyRef:
                key: model_server_url
                name: model-server-config-v1
          image: 306093656765.dkr.ecr.ap-south-1.amazonaws.com/a15/web-server:latest
          imagePullPolicy: IfNotPresent
          name: web-server
          ports:
          - containerPort: 80
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status:
    availableReplicas: 2
    fullyLabeledReplicas: 2
    observedGeneration: 1
    readyReplicas: 2
    replicas: 2
- apiVersion: autoscaling/v2
  kind: HorizontalPodAutoscaler
  metadata:
    annotations:
      meta.helm.sh/release-name: fastapi-release-prod
      meta.helm.sh/release-namespace: default
    creationTimestamp: "2025-01-17T18:25:32Z"
    labels:
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: model-server
      app.kubernetes.io/part-of: fastapi-app
    name: classifier-hpa
    namespace: prod
    resourceVersion: "39690"
    uid: a5928f94-e8ad-41a4-bba1-e013c45e62d9
  spec:
    maxReplicas: 10
    metrics:
    - resource:
        name: cpu
        target:
          averageUtilization: 50
          type: Utilization
      type: Resource
    minReplicas: 3
    scaleTargetRef:
      apiVersion: apps/v1
      kind: Deployment
      name: model-server
  status:
    conditions:
    - lastTransitionTime: "2025-01-17T18:25:47Z"
      message: recent recommendations were higher than current one, applying the highest
        recent recommendation
      reason: ScaleDownStabilized
      status: "True"
      type: AbleToScale
    - lastTransitionTime: "2025-01-17T18:26:17Z"
      message: the HPA was able to successfully calculate a replica count from cpu
        resource utilization (percentage of request)
      reason: ValidMetricFound
      status: "True"
      type: ScalingActive
    - lastTransitionTime: "2025-01-17T18:32:17Z"
      message: the desired replica count is less than the minimum replica count
      reason: TooFewReplicas
      status: "True"
      type: ScalingLimited
    currentMetrics:
    - resource:
        current:
          averageUtilization: 0
          averageValue: 2m
        name: cpu
      type: Resource
    currentReplicas: 3
    desiredReplicas: 3
    lastScaleTime: "2025-01-17T18:39:03Z"
kind: List
metadata:
  resourceVersion: ""
